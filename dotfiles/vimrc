" (C) 2013-2015 David 'Mokon' Bond, All Rights Reserved

" Load plugins

" pathogen plugins that we need to disable on this host.
let g:pathogen_disabled = []

if v:version < '703' || !has('python')
      call add(g:pathogen_disabled, 'numbers.vim')
      " clang_complete
endif

execute pathogen#infect()

filetype plugin indent on " Enable lang dep. indenting
syntax on " We want syntax coloring

set mouse=v " Use the mouse in visual mode.
set hlsearch " Highlight search.
set ai " Auto indentation.
set nocp " I don't care about compat with vi.
set expandtab
set pastetoggle=<F2> " Quick shortcut to toggle paste mode.
set autoread " Watch for file changes.
set showmatch " Show the matching bracket.
set cmdheight=2 " Cmdline two high.
set ruler " Show the current pos. at the bottom.
set tabstop=2 shiftwidth=2 expandtab " My default indentation.
set number " Number lines.
set laststatus=2 " Always show the last status msg.
set clipboard=unnamed
set hid
set wildmenu
set viminfo='100,<100,s10,h
set directory=~/.vim/swap,.

let g:html_indent_inctags = "html,body,head,tbody"

autocmd FileType make setlocal noexpandtab " Makefiles need tabs. Don't convert
                                           " those to spaces.

" If supported color the 80th colomn.
if exists('+colorcolumn')
  set colorcolumn=80
  autocmd BufNewFile,BufRead COMMIT_EDITMSG setlocal spell
  autocmd BufNewFile,BufRead COMMIT_EDITMSG set colorcolumn=72
endif

" Color anything over 80 chars red.
highlight ColorColumn ctermbg=lightgrey guibg=lightgrey
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%81v.\+/

let cs=$menv_dotfiles_dir."/vimrc_style/".$CODING_STYLE.".vim"
if filereadable(cs)
  exec 'source '.cs
endif

" A nice function that strips trailing white space from a file. Mapped to
" leader space.
function! <SID>StripTrailingWhitespace()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
nmap <silent> <leader><space> :call <SID>StripTrailingWhitespace()<CR>

function! FindAndReplaceAllConfirm(from, to)
  exec '%s/' . a:from . '/' . a:to . '/gc'
endfunction

function! FindAndReplaceAll(from, to)
  exec '%s/' . a:from . '/' . a:to . '/g'
endfunction

function! FindAndReplaceAllConfirmWord(from, to)
  exec '%s/\<' . a:from . '\>/' . a:to . '/gc'
endfunction

function! FindAndReplaceAllWord(from, to)
  exec '%s/\<' . a:from . '\>/' . a:to . '/g'
endfunction

function! DeleteAllWhiteSpaceLines()
  exec 'g/^\s*$/d'
endfunction

function! StripTrailingWhitespaceConfirm()
  echo "Do you want to strip white space?"
  let a = getchar()
  if a == 121 " 12 => y
    call <SID>StripTrailingWhitespace()
  endif
endfunction

autocmd BufWrite *.cpp,*.hpp call StripTrailingWhitespaceConfirm()

function AddRuleOfSix(...)
  if a:0 > 1
    let class = a:1
  else
    let class = expand("%:t:r")
  end

  if a:0 == 2
    let mod = a:2
  elseif a:0 > 2
    echoerr "invalid arguments given"
    return
  else
    let mod = "delete"
  end
  let s:line=line(".")
  call setline(s:line,"    ".class."() = default;")
  call append(s:line,"")
  call append(s:line+1,"    virtual ~".class."() = default;")
  call append(s:line+2,"")
  call append(s:line+3,"    ".class."(const ".class."&) = ".mod.";")
  call append(s:line+4,"")
  call append(s:line+5,"    ".class."& operator=(const ".class."&) = ".mod.";")
  call append(s:line+6,"")
  call append(s:line+7,"    ".class."(const ".class."&&) = ".mod.";")
  call append(s:line+8,"")
  call append(s:line+9,"    ".class."& operator=(const ".class."&&) = "mod.";")
  call append(s:line+10,"")
  unlet s:line
endfunction

function AddClass(...)
  if a:0 > 1
    let class = a:1
  else
    let class = expand("%:t:r")
  end

  if a:0 == 2
    let mod = a:2
  elseif a:0 > 2
    echoerr "invalid arguments given"
    return
  else
    let mod = "delete"
  end
  let s:line=line(".")
  call setline(s:line,"class ".class." {")
  call append(s:line,"    ".class."() = default;")
  call append(s:line+1,"")
  call append(s:line+2,"    virtual ~".class."() = default;")
  call append(s:line+3,"")
  call append(s:line+4,"    ".class."(const ".class."&) = ".mod.";")
  call append(s:line+5,"")
  call append(s:line+6,"    ".class."& operator=(const ".class."&) = ".mod.";")
  call append(s:line+7,"")
  call append(s:line+8,"    ".class."(const ".class."&&) = ".mod.";")
  call append(s:line+9,"")
  call append(s:line+10,"    ".class."& operator=(const ".class."&&) = "mod.";")
  call append(s:line+11,"")
  call append(s:line+12,"}")
  unlet s:line
endfunction

function UpdateModifiable()
  if !exists("b:setmodifiable")
    let b:setmodifiable = 0
  endif
  if &readonly
    if &modifiable
      setlocal nomodifiable
      let b:setmodifiable = 1
    endif
  else
    if b:setmodifiable
      setlocal modifiable
    endif
  endif
endfunction
autocmd BufReadPost * call UpdateModifiable()

imap <F7> <Esc>:execute AddCPP()<CR>

highlight User1 guifg=Red   guibg=NONE ctermfg=Red   ctermbg=NONE
highlight User2 guifg=Blue  guibg=NONE ctermfg=Blue  ctermbg=NONE
highlight User3 guifg=Green guibg=NONE ctermfg=Green ctermbg=NONE
highlight User4 guifg=White guibg=NONE ctermfg=White ctermbg=NONE
highlight User5 guifg=Gray  guibg=NONE ctermfg=Gray  ctermbg=NONE

cmap w!! %!sudo tee > /dev/null %

" Update the status line to something better.
set statusline =
set statusline +=%1*%h\ %w\
set statusline +=%2*%{&ff}                       " file format
set statusline +=%1*%y                           " file type
set statusline +=%1*\ %<%F%*                     " full path
set statusline +=%1*%m                           " modified flag
set statusline +=%2*%r                           " readonly flag
set statusline +=\ %3*%l/%L                      " line
set statusline +=\ %v                            " column number
set statusline +=\ %2*0x%04B\                    " char under cursor

" Spell check.
map <leader>ss :setlocal spell!<cr>

" Toggle nerd tree.
"
map <leader>n :NERDTreeToggle<CR>

nnoremap <F5> :NumbersToggle<CR>
nnoremap <F6> :set nonumber<CR>
nnoremap <F7> :GitGutterToggle<CR>

nnoremap <F8> :call ToggleForCopy()<CR>

function! ToggleForCopy()
  :NumbersToggle
  :set nonumber
  :GitGutterToggle
  setlocal colorcolumn=
endfunction

set nocscopeverbose

let vimDir = '$HOME/.vim'
let &runtimepath.=','.vimDir

if has('persistent_undo')
  let myUndoDir = expand(vimDir . '/undodir')
  call system('mkdir ' . myUndoDir)
  let &undodir = myUndoDir
  set undofile
  set undolevels=1000
  set undoreload=10000
endif

" =============================================================================
" Some useful vimrc settings I don't want enabled by default.

" set ignorecase " Case insensitive search
" set smartcase

" I need to figure out how to use this with my overlength highlight.
" highlight WhitespaceEOL ctermbg=red guibg=red
" match WhitespaceEOL /\s\+$/
"
" Spell Checking!
" set spell spelllang=en_us
" setlocal spell spelllang=en_us
"
" These commands would open a nerd tree and switch the focus to the file being
" opened but in general  I find they annoy me more than are useful. If I need
" to use the nerdtree I can just open it by hand.
" autocmd VimEnter * NERDTree
" autocmd BufEnter * NERDTreeMirror
" autocmd VimEnter * wincmd w

" http://vim.wikia.com/wiki/Show_what_function_the_cursor_is_in
function! GetProtoLine()
  let ret       = ""
  let line_save = line(".")
  let col_save  = col(".")
  let window_line = winline()
  let top       = line_save - winline() + 1
  let so_save = &so
  let &so = 0
  let istypedef = 0
  " find closing brace
  let closing_lnum = search('^}','cW')
  if closing_lnum > 0
    if getline(line(".")) =~ '\w\s*;\s*$'
      let istypedef = 1
      let closingline = getline(".")
    endif
    " go to the opening brace
    keepjumps normal! %
    " if the start position is between the two braces
    if line(".") <= line_save
      if istypedef
        let ret = matchstr(closingline, '\w\+\s*;')
      else
        " find a line contains function name
        let lnum = search('^\w','bcnW')
        if lnum > 0
          let ret = getline(lnum)
        endif
      endif
      let lines = closing_lnum - line(".")
      let line_rel = line_save - line(".")
      let ret = ret . ':' . line_rel . '/' . lines
    endif
  endif
  "exe "keepjumps normal! " . top . "Gz\<CR>"
  " restore position and screen line
  call cursor(line_save, col_save)
  " needed for diff mode (scroll fixing)
  let line_diff = winline() - window_line
  if line_diff > 0
    exe 'normal ' . line_diff . "\<c-e>"
  elseif line_diff < 0
    exe 'normal ' . -line_diff . "\<c-y>"
  endif
  " sometimes cursor position is wrong after scroll fix, why? Workaround:
  call cursor(line_save, col_save)
  let &so = so_save
  return ret
endfunction

function! WhatFunction()
  " allow to quickly disable it (:let b:noWhatFunction=1)
  if exists("b:noWhatFunction") && b:noWhatFunction
    return ""
  endif
  if &ft != "c" && &ft != "cpp"
    return ""
  endif
  let proto = GetProtoLine()
  if proto == ""
    return "?"
  endif
  let line_info = matchstr(proto, ':\d\+\/\d\+')
  if stridx(proto, '(') > 0
    let ret = matchstr(proto, '\~\?\w\+(\@=')
  elseif proto =~# '\<struct\>'
    let ret = matchstr(proto, 'struct\s\+\w\+')
  elseif proto =~# '\<class\>'
    let ret = matchstr(proto, 'class\s\+\w\+')
  else
    let ret = strpart(proto, 0, 15) . "..."
  endif
  let ret .= line_info
  return ret
endfunction
