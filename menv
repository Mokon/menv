#!/bin/bash

################################################################################
#
# The following is a specialized script to setup a linux enviornment that has
# everything setup just the way I like it. It is also self contained in that
# a single wget and execution of the script should setup everything.
#
# This script will setup things such as your bashrc file and bash_profile. It
# also setups a .vimrc file and installs a bunch of plugins for vim.
#
# The first time you install this file run:
#   cd ~
#   wget -q -N --no-check-certificate \
#     https://raw.github.com/Mokon/menv/master/menv
#   chmod +x menv
#   ./menv
# From then on to update the script called:
#   ~/menv_update
# To uninstall the script call:
#   ~/menv_uninstall
#
# Never edit any of the menv files directly. Always edit in the git repo.
#
# (C) 2013 David 'Mokon' Bond, All Rights Reserved
#
################################################################################

# A global array of functions used to unset funcs on cleanup.
menv_funcs=()

# The location of this system on github.
menv_loc="https://raw.github.com/Mokon/menv/master/menv"
vimrc_loc="https://raw.github.com/Mokon/menv/master/menv_vimrc"

# Aux function to test if a command exists.
function cmdexists {
    test -x "$(command -v "$1")"
}
menv_funcs+=(cmdexists)

# Aux function to wget a file.
function fetch {
  command -v wget >/dev/null 2>&1 || { echo >&2 "wget not found" ; return ;}
  wget -O `basename ${1}` -q -N --no-check-certificate ${1}
}
menv_funcs+=(fetch)

# Aux functiont to fetch from github.
function githubf {
  fetch https://github.com/$1
}
menv_funcs+=(githubf)

################################################################################
# A main function which determines how this program was called.
function menv_main {
  case ${BASH_SOURCE[0]} in
    *menv|*menv_install) menv_install ;;
    *menv_update) menv_update ;;
    *menv_uninstall) menv_uninstall ;;
    *.bash_profile|*.profile) menv_login ;;
    *.bashrc) menv_nonlogin ;;
    *.bash_aliases)
      echo "No support for bash_aliases. Aliases found in bashrc." ;;
    *) echo "Unknown menv invocation" ;;
  esac
}
menv_funcs+=(menv_main)

##############################################################################t#
# Sets up the environment from scratch.
function menv_install {
  echo "Setting up the Mokon Environment."

  pushd .

  cd ~

  # Aux function to setup a menu symbolic link. Backing up w/e was there before.
  function menv_link {
    if [ -f $1 ] && { [ ! -L $1 ] ||
        { [ -L $1 ] && [ `readlink $1` != "menv" ] ; } ; } ; then
      echo "Found foreign ${1}. Backing up as ${1}_backup."
       /bin/mv --backup=numbered $1 $1_backup
    elif [ -f $1 ] ; then
      echo "Found valid $1 file."
    fi
    if [ ! -f $1 ] ; then
      ln -s menv $1
      echo "Created $1 file."
    fi
  }

  menv_link menv_install
  menv_link menv_update
  menv_link menv_uninstall
  menv_link .bashrc
  menv_link .bash_profile

  unset menv_link

  grep "\" menv generated vimrc" .vimrc &> /dev/null
  if [ $? == 0 ] ; then
    echo "Found menv vimrc. Clearing."
    /bin/rm -f .vimrc
  elif [ -f .vimrc ] ; then
    /bin/mv --backup=numbered .vimrc vimrc_backup
    echo "Found foreign vimrc. Backing up as vimrc_backup."
  fi

  curl -s ${vimrc_loc} &> .vimrc
  vimplugins

  # Aux function to create a directory if it doesn't exist with nice printing
  function menv_mkdir {
    [ ! -d $1 ] &&  mkdir $1 &&
      echo "Created $1 directory." || echo "Found $1 directory"
  }

  menv_mkdir trash
  menv_mkdir backup

  unset menv_mkdir

  if [ -f menv_local_nonlogin ]; then
    echo "Found ~/menv_local_nonlogin."
  fi

  if [ -f menv_local_login ]; then
    echo "Found ~/menv_local_login."
  fi

  popd
}
menv_funcs+=(menv_install)


################################################################################
# Attempts to deploy a basic menv setup on the system.
function menv_update {
  pushd .

  cd ~
  fetch ${menv_loc}
  chmod +x menv
  ./menv
  source .bash_profile

  popd
}
menv_funcs+=(menv_update)

################################################################################
# Attempts to cleanup menv
function menv_uninstall {
  function if_sym_delete {
    if [ -L $1 ] ; then
      /bin/rm -f $1
    fi
  }

  pushd .
  cd ~

  if_sym_delete .bashrc
  if_sym_delete .bash_profile
  if_sym_delete menv_install
  if_sym_delete menv_update
  if_sym_delete menv_uninstall

  unset if_sym_delete

  unalias -a

  for menv_func in "${menv_funcs[@]}" ; do
      unset "${menv_func}"
  done

  popd
}
menv_funcs+=(menv_uninstall)

################################################################################
# Run on login this is essentially the bash_profile script.
function menv_login {
  if [ -f ~/.bashrc ]; then
	  source ~/.bashrc
  fi

  export PATH=$PATH:$HOME/bin

  # Source a local login script if one exists.
  if [ -f ~/menv_local_login ]; then
  	source ~/menv_local_login
  fi

  # ---------------------------------------------------------------------------
  # Basic env.
  menv_motd
}
menv_funcs+=(menv_login)

################################################################################
# Run on nonlogin and login this is essentially the bashrc script.
function menv_nonlogin {
  # Unalias just in case we have aliases from another script run lying around.
  unalias -a

  # I like to keep my prompt simple...
  TC_GRE="\[\033[0;32;40m\]"
  TC_RESET="\[\033[0;0m\]"
  PS1="${TC_GRE}i:${TC_RESET}"

  # Proper umask
  umask 022
  
  # I like a large history size.
  HISTSIZE=10000

  # Setup editor, vim perfered.
  export EDITOR=ed
  cmdexists emacs && EDITOR=emacs;
  cmdexists vi && EDITOR=vi;
  cmdexists vim && EDITOR=vim;
  
  # Color scheme for LS.
  LS_COLORS="rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=01;05;37;41:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.tbz=01;31:*.tbz2=01;31:*.bz=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=01;36:*.au=01;36:*.flac=01;36:*.mid=01;36:*.midi=01;36:*.mka=01;36:*.mp3=01;36:*.mpc=01;36:*.ogg=01;36:*.ra=01;36:*.wav=01;36:*.axa=01;36:*.oga=01;36:*.spx=01;36:*.xspf=01;36:*.c=01;31:*.h=05;36:"

  # ---------------------------------------------------------------------------
  # General util.
  alias rm='mv --target-directory ~/trash'
  alias delete_immediately='/bin/rm -Rf'
  alias empty_trash='/bin/rm -rf ~/trash/*'
  alias mv='mv -i'
  alias ps="ps -aux"
  alias e="exit"
  alias ex="exit"
  alias exi="exit"
  alias extract="tar -xzvf"
  alias build-essentials="yum groupinstall 'Development Tools'"
  alias ls="ls --color"
  alias rpm_list_deps="rpm -qpR"
  alias bx="source ~/.bashrc"
  alias mvbk="/bin/mv --backup=numbered"
  alias cpbk="/bin/cp --backup=numbered"
  alias remote_terminal_share="wemux"
  alias show_bash_functions="typeset -f"
  alias show_bash_function="type"
  alias list_bash_functions="typeset -F"
  alias tarball="tar cvzf"
  alias delallswap="/bin/rm *.swp"

  # Function that opens vim at a given line number.
  function vin {
    vim +$2 $1
  }
  menv_funcs+=(vin)

  function reset_tc {
    TC_RESET="[0m"
    echo ${TC_RESET}
  }
  menv_funcs+=(reset_tc)

  alias gits="git status -s"
  alias gitic="git commit -m \"Initial Commit\""
  alias gitc="git commit -am "
  alias gitsync="git push origin master"
  alias gitsetup="git config --global user.name \David Bond\" ; \
                  git config --global user.email mokon@mokon.net ; \
                  git commit --amend --reset-author"

  # Function to clone from github.
  function githubc {
    git clone https://github.com/$1
  }
  menv_funcs+=(githubc)

  # Simple function for my dev box which has menv checked out in git. This
  # allows me to test menv on the box before I push it to github.
  if [ -d ~/git/menv ]; then
    function menv_stage {
      pushd .

      cd ~/git/menv/

      cp menv ~
      source ~/menv_install
      source ~/.bashrc
      cp menv_vimrc .vimrc # Overwrite since normal menv grabs from github.

      popd
    }
    menv_funcs+=(menv_stage)
  fi
  
  # A function to list a directory structure in a nice tree.
  function tree_list {
    ls -R $1 | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'
  }
  menv_funcs+=(tree_list)

  # A function to grep excluding something I normally don't care about.
  function mgrep {
    grep -rn $1 $2 |grep -v .svn |grep -v Binary
  }
  menv_funcs+=(mgrep)
  
  function findprogram {
    ls $(echo $PATH:/sbin:/usr/sbin | sed "s/:/\ /g") | grep "$1" \
      | sort --unique
  }
  menv_funcs+=(findprogram)

  # ---------------------------------------------------------------------------
  # Programming related
  alias svn_add_dir_only="svn add --depth=empty"
  alias xval="valgrind --track-origins=yes --leak-check=full --show-reachable=yes"
  alias sval="xval --gen-suppressions=yes --demangle=no"
  alias ct="cleartool"
  alias cscopeR="cscope -R"
  alias cscopeD="cscope -d"
  alias profvis="kcachegrind"
  alias prof="valgrind --tool=callgrind"

  function gprof {
    gprof $1 gmon.out &> profileinfo.out 
  }
  menv_funcs+=(gprof)

  # Function to init a cscope database with absolute filenames.
  function cscopeinit {
    find `realpath .` -name '*.c' -o -name '*.h' -o -name '*.cpp' -o -name '*.hpp' \
      > ./cscope.files
    cscope -b
    CSCOPE_DB=`realpath cscope.out`
    export CSCOPE_DB
  }
  menv_funcs+=(cscopeinit)

  export GLOG_minloglevel=0

  # Simple hack function to diff the file contents recursively of two folders.
  function lsdiff {
    ls -R $1 |grep -v "\/" &> /tmp/ls1.diff
    ls -R $2 |grep -v "\/" &> /tmp/ls2.diff
    diff /tmp/ls1.diff /tmp/ls2.diff
  }
  menv_funcs+=(lsdiff)

  function linecount {
    function count_ext {
      find . -not -name "*designer.cs" -and -name "*.$1" -exec wc -l {} \; | awk '{lines += $1 ; files += 1  }; END { print lines } '
      # FILES=`find $2 -type f -name "*.$1" `
      #if [ -n "${FILES}" ] ; then
      #  echo $FILES |tail -1 &>/tmp$1
      #  LC=`echo $FILES | tail -1 | awk '{print $1}'`
      #  echo $LC
      #else
      #  echo 0
      #fi
    }
    HLC=`count_ext h $1`
    CLC=`count_ext c $1`
    CPPLC=`count_ext cpp $1`
    CUCLC=`count_ext C $1`
    HPPLC=`count_ext hpp $1`
    CSLC=`count_ext cs $1`
    JAVALC=`count_ext java $1`
    SMLLC=`count_ext sml $1`
    unset count_ext 

    echo "HCL = $HLC, CLC = $CLC, CPPLC = $CPPLC, CUCLC = $CUCLC, HPPLC = $HPPLC,
          CSLC = $CSLC, JAVALC = $JAVALC, SMLLC = $SMLLC"
    TLC=`expr $HLC + $CLC + $CPPLC + $CUCLC + $HPPLC + $CSLC + $JAVALC + $SMLLC`
    echo "TLC = $TLC"

  }
  menv_funcs+=(count_c_files)

  # ---------------------------------------------------------------------------
  # Gaming
  export MCHOME=~/.minecraft
  alias mc="java -Xmx2048M -Xms512M -cp minecraft.jar net.minecraft.LauncherFrame"
  alias mcs="java -Xmx2048M -Xms1024M -jar minecraft_server.jar nogui"

  # This just works for my epsom box... The only box I play minecraft on.
  export LD_LIBRARY_PATH="/lib/jvm/java-1.7.0-openjdk-1.7.0.9.x86_64/jre/lib/amd64/"

  # A function which downloads the minecraft jar launcher file.
  function mclauncher {
    echo "Downloading Minecraft jar."
    wget -O minecraft.jar \
      "https://s3.amazonaws.com/MinecraftDownload/launcher/minecraft.jar" 
  }
  menv_funcs+=(mclauncher)

  alias mcdv="rm ${MCHOME}/bin/version"
  alias mcjarspc="ln -s ${MCHOME}/bin/minecraftspc.jar \
    ${MCHOME}/bin/minecraft.jar"
  alias mcjarmc=" ln -s ${MCHOME}/bin/minecraftmc.jar \
    ${MCHOME}/bin/minecraft.jar"

  # NOTE: I can set the mc homedir with this arg: mc -Duser.home=$DIR

  # Function to install single player commands into minecraft.
  function mcspc {
    /bin/rm -rf mc
    mkdir mc
    cd mc

    echo "Downloading Single Player Commands Plugin."
    wget -O spc.zip "http://bit.ly/10ZwXQ5"
    mkdir spc
    unzip -qq -d spc spc.zip
    /bin/rm -f spc.zip

    echo "Backing up MCHOME"
    /bin/cp --backup=numbered -R ${MCHOME} ~/backup/

    echo "Extracting minecraft.jar"
    unzip -qq -d minecraftjar ${MCHOME}/bin/minecraft.jar 

    echo "Creating new minecraft.jar"
    /bin/rm -rf minecraftjar/META-INF
    /bin/cp -R spc/com minecraftjar                                             
    /bin/cp -R spc/*.class minecraftjar     

    cd minecraftjar
    zip -q -r ../minecraftspc.jar *
    cd ..

    echo "Moving jar files to ${MCHOME}."
    cp spc/*.jar ${MCHOME}/bin/
    cp minecraftspc.jar ${MCHOME}/bin/minecraftspc.jar

    cd ..
    /bin/rm -rf mc 
  }
  menv_funcs+=(mcspc)

  function mclib {
    /bin/rm -rf mc
    mkdir mc
    cd mc

    echo "Downloading Latest LWJGL."
    wget -O lwjgl.zip http://sourceforge.net/projects/java-game-lib/files/Official%20Releases/LWJGL%202.8.5/lwjgl-2.8.5.zip/download
    unzip lwjgl.zip

    function cptomc {
      cp "lwjgl-2.8.5/jar/${1}" ${MCHOME}/bin/
    }
    
    cptomc jinput.jar
    cptomc lwjgl.jar
    cptomc lwjgl_util.jar
    unset cptomc

    function cptomc {
      cp "lwjgl-2.8.5/native/linux/${1}" ${MCHOME}/bin/natives/
    }

    cptomc libjinput-linux.so
    cptomc libjinput-linux64.so
    cptomc liblwjgl.so
    cptomc liblwjgl64.so
    cptomc libopenal.so
    cptomc libopenal64.so
    unset cptomc

    cd ..
    /bin/rm -rf mc
  }
  menv_funcs+=(mclib)

  # Function to backup my ii map in mc.
  function mcbkii {
    ii="${HOME}/.minecraft/saves/Imperium Infinitus"

    tar czf ii.tgz "${ii}"
    /bin/mv --backup=numbered ii.tgz ~/backup/
  }
  menv_funcs+=(mcbkii)

  # ---------------------------------------------------------------------------

  # Source a local nonlogin script if one exists.
  if [ -f ~/menv_local_nonlogin ]; then
  	source ~/menv_local_nonlogin
  fi

  # Source global definitions
  if [ -f /etc/bashrc ]; then
  	source /etc/bashrc
  fi
}
menv_funcs+=(menv_nonlogin)

################################################################################
# This function loads vimplugins.
function vimplugins {

  function githubz {
    echo "Installing vim pathogen plugin $1."
    githubf $1/archive/master.zip
    unzip -qq master.zip
    /bin/rm -f master.zip
    mv "$(basename $1)-master" $(basename $1)
  }

  pushd .

  /bin/rm -rf ~/.vim

  echo "Install vim pathogen plugin handler."

  mkdir -p ~/.vim/autoload ~/.vim/bundle
  curl -Sso ~/.vim/autoload/pathogen.vim \
   https://raw.github.com/tpope/vim-pathogen/master/autoload/pathogen.vim

  cd ~/.vim/bundle
  githubz scrooloose/nerdtree
  githubz myusuf3/numbers.vim
  # githubz gmarik/vundle
  # githubz valloric/YouCompleteMe

  cd ~/.vim
  githubz Rip-Rip/clang_complete
  /bin/cp -R clang_complete/* .
  /bin/rm -rf clang_complete

  unset githubz

  mkdir -p ~/.vim/plugins
  cd ~/.vim/plugins

  echo "Installing cscope plugin."
  fetch http://cscope.sourceforge.net/cscope_maps.vim

  popd
}
menv_funcs+=(vimplugins)

################################################################################
# Prints a nice message of the day with a whole bunch of useful information.
function menv_motd {

  # Terminal colors, assuming 256 colors.
  TC_RESET="[0m"
  TC_SKY="[0;37;44m"
  TC_GRD="[0;30;42m"
  TC_TEXT="[38;5;203m"

  echo -n "${TC_SKY}
              ( \`   )_                                                         |
             (    )    \`)                                                      |
           (_   (_ .  _) _)                                                    |
                                          _                                    |
                                         (  )                                  |
          _ .                         ( \`  ) . )                               |
        (  _ )_                      (_, _(  ,_)_)                             |
      (_  _(_ ,)                                                               |
                                                                               |
${TC_TEXT}[44m                ##     ##  #######  ##    ##  #######  ##    ##                |
                ###   ### ##     ## ##   ##  ##     ## ###   ##                |
                #### #### ##     ## ##  ##   ##     ## ####  ##                |
                ## ### ## ##     ## #####    ##     ## ## ## ##                |
                ##     ## ##     ## ##  ##   ##     ## ##  ####                |
                ##     ## ##     ## ##   ##  ##     ## ##   ###                |
                ##     ##  #######  ##    ##  #######  ##    ##                |
${TC_SKY}                                                                               |
               _  _                                                            |
              ( \`   )_                                                         |
             (    )    \`)                                                      |
           (_   (_ .  _) _)                                                    |
                                                        (  )                   |
                      _, _ .                         ( \`  ) . )                |
                     ( (  _ )_                      (_, _(  ,_)_)              |
                   (_(_  _(_ ,)                                                |
                                                                               |
${TC_GRD}"

  echo -e "\n                           Welcome to Mokon's Linux!                           \n"

  MEMT=`cat /proc/meminfo | grep MemTotal`
  SWAT=`cat /proc/meminfo | grep '^SwapTotal:'`
  PMODEL=`cat /proc/cpuinfo | \
    grep '^model name' | awk '{print $4 $5 $6}' | head -1`
  PMHZ=`cat /proc/cpuinfo | \
    grep '^cpu MHz' | awk '{print $4}'| sed -e 's/\.[0-9]*//g' | head -1`
  PVENDOR=`cat /proc/cpuinfo | \
    grep '^vendor_id' | awk '{print $3}' | head -1`
  PNUMS=`cat /proc/cpuinfo | \
    grep '^processor' | wc -l | awk '{print $1}' | head -1`

  echo "OS............: `uname -o`"
  echo "Hostname......: `uname -n`"
  echo "Address.......: `/sbin/ifconfig | grep "inet" | grep -v '127.\|::1' \
                                        | awk '{print $2}' | tr '\n' '\t'` "
  echo "Kernel........: `uname -s ` `uname -r` `uname -v`"
  echo "Machine HW....: `uname -m`"
  echo "Uptime........:`uptime | sed 's/.*up ([^,]*), .*/1/'`"
  echo "Memory........: `echo $MEMT | awk {'print $2'}` `echo $MEMT \
                                    | awk {'print $3'}`"
  echo "SWAP..........: `echo $SWAT | awk {'print $2'}` `echo $SWAT \
                                    | awk {'print $3'}`"
  echo "Username......: `whoami`"
  echo "Processor(s)..: $PNUMS $PVENDOR ${PMHZ} MHz ${PMODEL}"

  echo ${TC_RESET}
}
menv_funcs+=(menv_motd)

################################################################################
# Execute the script.
menv_main

