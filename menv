#!/bin/bash
#
# (C) 2013 David 'Mokon' Bond, All Rights Reserved
#
# See README
#

# Ensure we are in a bash shell.
if [[ "$SHELL" != *bash* ]] ; then
  echo "menv requires a bash shell, bye"
  exit -1
fi

# A global array of functions used to unset funcs on cleanup.
menv_funcs=()
# A global array of aliases used to unalias aliases on cleanup.
menv_aliases=()
# A global array of exports used to unset exports on cleanup.
menv_exports=()

# A function which pushes a function onto the menv array of functions.
function menv_function {
  menv_funcs+=($1)
}

# A function which pushes an alias onto the menv array of aliases.
function menv_alias {
  alias "$*"
  menv_aliases+=($1)
}

# A function which pushes an export onto the menv array of exports.
function menv_export {
  export "$*"
  menv_exports+=($1)
}

# The location of menv files on github.
menv_git_loc="https://github.com/Mokon/menv.git"
menv_loc="https://raw.github.com/Mokon/menv/master/menv"
vimrc_loc="https://raw.github.com/Mokon/menv/master/menv_vimrc"

# Aux function to test if a command exists.
menv_function cmdexists
function cmdexists {
    test -x "$(command -v "$1")"
}

# Aux function to wget a file. If the second param is set then this is the name
# of the produced file.
menv_function fetch
function fetch {
  command -v wget >/dev/null 2>&1 || { echo >&2 "wget not found" ; return ; }
  if [ -n "$2" ] ; then
    fname=$2
  else
    fname=`basename ${1}`
  fi
  wget -O $fname -q -N --no-check-certificate ${1}
}

# Aux function to fetch from github.
menv_function githubf
function githubf {
  fetch https://github.com/$1
}

################################################################################
# A main function which determines how this program was called.
menv_function menv_main
function menv_main {
  case ${BASH_SOURCE[0]} in
    *menv|*menv_install) menv_install ;;
    *menv_update) menv_update ;;
    *menv_uninstall) menv_uninstall ;;
    *.bash_profile|*.profile) menv_login ;;
    *.bashrc) menv_nonlogin ;;
    *.bash_aliases)
      echo "No support for bash_aliases. " \
           "Aliases are found in the .bashrc file." ;;
    *) echo "Unknown menv invocation" ;;
  esac
}

##############################################################################t#
# Sets up the environment from scratch.
menv_function menv_install
function menv_install {
  echo "Installing menv!"

  pushd .

  cd ~

  # Aux function to setup a menu symbolic link. Backing up w/e was there before.
  function menv_link {
    if [ -f $1 ] && { [ ! -L $1 ] ||
        { [ -L $1 ] && [ `readlink $1` != "menv" ] ; } ; } ; then
      echo "Found foreign ${1}. Backing up as ${1}_backup."
       /bin/mv --backup=numbered $1 $1_backup
    elif [ -f $1 ] ; then
      echo "Found valid $1 file."
    fi
    if [ ! -f $1 ] ; then
      ln -s menv $1
      echo "Created $1 file."
    fi
  }

  menv_link menv_install
  menv_link menv_update
  menv_link menv_uninstall
  menv_link .bashrc
  menv_link .bash_profile

  unset menv_link

  grep "\" menv generated vimrc" .vimrc &> /dev/null
  if [ $? == 0 ] ; then
    echo "Found menv vimrc. Clearing."
    /bin/rm -f .vimrc
  elif [ -f .vimrc ] ; then
    /bin/mv --backup=numbered .vimrc vimrc_backup
    echo "Found foreign vimrc. Backing up as vimrc_backup."
  fi

  curl -s ${vimrc_loc} &> .vimrc
  vimplugins

  # Aux function to create a directory if it doesn't exist with nice printing
  function menv_mkdir {
    [ ! -d $1 ] &&  mkdir $1 &&
      echo "Created $1 directory." || echo "Found $1 directory"
  }

  menv_mkdir trash
  menv_mkdir backup

  unset menv_mkdir

  if [ -f menv_local_nonlogin ]; then
    echo "Found ~/menv_local_nonlogin."
  fi

  if [ -f menv_local_login ]; then
    echo "Found ~/menv_local_login."
  fi

  popd
}

################################################################################
# Attempts to deploy a basic menv setup on the system.
menv_function menv_update
function menv_update {

  echo "Updating menv"

  ping -c1 -W1 github.com &> /dev/null
  if [ $? ]; then
    urldiff $menv_loc ~/menv &> /dev/null
    menvs=$?
    
    urldiff $vimrc_loc ~/.vimrc &> /dev/null
    vimrcs=$?

    if [[ $menvs && $vimrcs ]] ; then
      echo "menv is up to date."
      return 0
    fi
  else
    echo "Git Hub not reachable. Could not update."
    return -1
  fi

  pushd .

  cd ~
  fetch ${menv_loc}
  chmod +x menv
  ./menv
  source .bash_profile

  popd
}

################################################################################
# Attempts to cleanup menv
menv_function menv_uninstall
function menv_uninstall {

  echo "Uninstalling menv"

  empty_trash
  /bin/rm -rf ~/trash

  function if_sym_delete {
    if [ -L $1 ] ; then
      /bin/rm -f $1
    fi
  }

  pushd .
  cd ~

  if_sym_delete .bashrc
  if_sym_delete .bash_profile
  if_sym_delete menv_install
  if_sym_delete menv_update
  if_sym_delete menv_uninstall

  unset if_sym_delete
  
  for menv_export in "${menv_exports[@]}" ; do
      unalias "${menv_export}"
  done

  for menv_alias in "${menv_aliases[@]}" ; do
      unalias "${menv_alias}"
  done

  for menv_func in "${menv_funcs[@]}" ; do
      unset "${menv_func}"
  done

  echo "Leaving the menv backup directory, vimrc, and vim plugins."

  popd
}

################################################################################
# Run on login this is essentially the bash_profile script.
menv_function menv_login
function menv_login {
  if [ -f ~/.bashrc ]; then
	  source ~/.bashrc
  fi

  export PATH=$PATH:$HOME/bin

  # Source a local login script if one exists.
  if [ -f ~/menv_local_login ]; then
  	source ~/menv_local_login
  fi

  menv_motd
}

################################################################################
# Run on nonlogin and login this is essentially the bashrc script.
menv_function menv_nonlogin
function menv_nonlogin {
  # Unalias just in case we have aliases from another script run lying around.
  for menv_alias in "${menv_aliases[@]}" ; do
      unalias "${menv_alias}"
  done

  # I like to keep my prompt simple...
  TC_GRE="\[\033[0;32;40m\]"
  TC_RESET="\[\033[0;0m\]"
  PS1="${TC_GRE}i:${TC_RESET}"

  # Proper umask
  umask 022

  # Some history items. I like a large history size and I like a history that
  # automatically saves itself after each command so if my shell exits I can
  # still find my last command.
  # TODO export HISTCONTROL=ignoredups:erasedups
  #shopt -s histappend
  #export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"
  HISTSIZE=10000

  # Setup editor, vim perfered.
  export EDITOR=ed
  cmdexists emacs && EDITOR=emacs;
  cmdexists vi && EDITOR=vi;
  cmdexists vim && EDITOR=vim;

  # Color scheme for LS.
  LS_COLORS="rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=01;05;37;41:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.tbz=01;31:*.tbz2=01;31:*.bz=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=01;36:*.au=01;36:*.flac=01;36:*.mid=01;36:*.midi=01;36:*.mka=01;36:*.mp3=01;36:*.mpc=01;36:*.ogg=01;36:*.ra=01;36:*.wav=01;36:*.axa=01;36:*.oga=01;36:*.spx=01;36:*.xspf=01;36:*.c=01;31:*.h=05;36:"

  # ---------------------------------------------------------------------------
  # menv specific aliases and functions
  menv_alias menv_refresh="source ~/.bash_profile"

  # Simple function for my dev box which has menv checked out in git. This
  # allows me to test menv on the box before I push it to github.
  if [ -d ~/git/menv ]; then
    menv_function menv_stage
    function menv_stage {
      pushd .

      cd ~/git/menv/

      cp menv ~
      source ~/menv_install
      source ~/.bash_profile
      cp menv_vimrc ~/.vimrc # Overwrite since normal menv grabs from github.

      popd
    }
  fi

  # General utility aliases, exports, and functions
  menv_alias ni="nodeinfo"
  menv_alias rm='mv --target-directory ~/trash'
  menv_alias delete_immediately='/bin/rm -Rf'
  menv_alias di='/bin/rm -Rf'
  menv_alias empty_trash='/bin/rm -rf ~/trash/*'
  menv_alias empty_dl='/bin/rm -rf ~/Downloads/*'
  menv_alias empty_all='/bin/rm -rf ~/trash/* ; /bin/rm -rf ~/Downloads/*'
  menv_alias mv='mv -i'
  menv_alias psa="ps -aux"
  menv_alias e="exit"
  menv_alias ex="exit"
  menv_alias exi="exit"
  menv_alias extract="tar -xzvf"
  menv_alias ls="ls --color"
  menv_alias bx="source ~/.bashrc"
  menv_alias mvbk="/bin/mv --backup=numbered"
  menv_alias cpbk="/bin/cp --backup=numbered"
  menv_alias remote_terminal_share="wemux"
  menv_alias show_bash_functions="typeset -f"
  menv_alias show_bash_function="type"
  menv_alias list_bash_functions="typeset -F"
  menv_alias tarball="tar cvzf"
  menv_alias delallswap="/bin/rm *.swp"
  menv_alias fkill="sudo kill -9"
  menv_alias cdmnt="pushd . &> /dev/null ; cd /run/media/mokon"
  menv_alias less="less -R"
  menv_alias grep="grep --color=always"

  menv_export PAGER=less

  # Function that opens vim at a given line number.
  menv_function vin
  function vin {
    vim +$2 $1
  }

  # A function to reset the terminal color.
  menv_function reset_tc
  function reset_tc {
    TC_RESET="[0m"
    echo ${TC_RESET}
  }

  # A function to list a directory structure in a nice tree.
  menv_function tree_list
  function tree_list {
    ls -R $1 | grep ":$" \
      | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'
  }

  # A function to grep excluding something I normally don't care about.
  menv_function mgrep
  function mgrep {
    grep -rn $1 $2 |grep -v .svn |grep -v Binary |grep -v .git
  }

  # Finds a program in the path which contains part of the given string.
  menv_function findprogram
  function findprogram {
    ls $(echo $PATH:/sbin:/usr/sbin | sed "s/:/\ /g") | grep "$1" \
      | sort --unique
  }

  # Pkg management aliases and functions
  menv_alias dpkg_what_provides="sudo dpkg-query -S"
  menv_alias dpkg_provides_what="sudo dpkg-query -L"
  menv_alias rpm_list_deps="rpm -qpR"
  menv_alias install-build-essentials="yum groupinstall 'Development Tools'"

  # Source control aliases and functions
  menv_alias gits="git status -s"
  menv_alias gitic="git commit -m \"Initial Commit\""
  menv_alias gitc="git commit -am "
  menv_alias gitpush="git push origin master"
  menv_alias gitsetup="git config --global user.name \"David Bond\" ; \
                  git config --global user.email mokon@mokon.net"
  menv_alias gitamendauthor="git commit --amend --reset-author"
  menv_alias svn_add_dir_only="svn add --depth=empty"
  menv_alias gitdo="git diff origin"
  menv_alias gitdh="git diff HEAD"

  # Function to clone from github.
  menv_function githubc
  function githubc {
    git clone https://github.com/$1
  }

  # Networking aliases and functions
  menv_alias arp_flush="ip -s -s neigh flush all"
  menv_alias amialone="ping 8.8.8.8"
  menv_alias amialonedns="ping google.com"

  # Programming related
  menv_alias xval="valgrind --track-origins=yes --leak-check=full "\
    "--show-reachable=yes"
  menv_alias sval="xval --gen-suppressions=yes --demangle=no"
  menv_alias ct="cleartool"
  menv_alias cscopeR="cscope -R"
  menv_alias cscopeD="cscope -d"
  menv_alias profvis="kcachegrind"
  menv_alias prof="valgrind --tool=callgrind"

  menv_function gprof
  function gprof {
    gprof $1 gmon.out &> profileinfo.out
  }

  # Function to init a cscope database with absolute filenames.
  menv_function cscopeinit
  function cscopeinit {
    find `realpath .` -name '*.c' -o -name '*.h' -o -name '*.cpp' \
      -o -name '*.hpp' > ./cscope.files
    cscope -b
    CSCOPE_DB=`realpath cscope.out`
    menv_export CSCOPE_DB
  }

  # A variable for google logging.
  menv_export GLOG_minloglevel=0

  # Simple hack function to diff the file contents recursively of two folders.
  menv_function lsdiff
  function lsdiff {
    ls -R $1 |grep -v "\/" &> /tmp/ls1.diff
    ls -R $2 |grep -v "\/" &> /tmp/ls2.diff
    tmp1=`mktemp`
    tmp2=`mktemp`
    diff $tmp1 $tmp2
    /bin/rm $tmp1 $tmp2
  }

  menv_function linecount
  function linecount {
    function count_ext {
      ret=`find . -not -name "*designer.cs" -and -name "*.$1"\
        -exec wc -l {} \; \
        | awk '{lines += $1 ; files += 1  }; END { print lines } '`

      if [[ $ret == "" ]] ; then
        echo "0"
      else
        echo $ret
      fi
    }
    HLC=`count_ext h $1`
    CLC=`count_ext c $1`
    CPPLC=`count_ext cpp $1`
    CUCLC=`count_ext C $1`
    HPPLC=`count_ext hpp $1`
    CSLC=`count_ext cs $1`
    JAVALC=`count_ext java $1`
    SMLLC=`count_ext sml $1`
    unset count_ext

    echo -ne "Line Counts:\n
      C headers = $HLC, C source = $CLC\n
      C++ (CPP) source = $CPPLC, C++ (C) source = $CUCLC, C++ headers = $HPPLC\n
      C# = $CSLC, java = $JAVALC, sml = $SMLLC\n"
    TLC=`expr $HLC + $CLC + $CPPLC + $CUCLC + $HPPLC + $CSLC + $JAVALC + $SMLLC`
    echo "Total Line Count: $TLC"
  }

  # A function to download an rfc and store it on the localhost. If the -l
  # option is given the rfc will be opened in lynx.
  menv_function rfc
  function rfc {
    ietf=http://tools.ietf.org
    rfcdir=~/rfc
    rfc=$1

    if [[ $2 == "-l" ]] ; then
      extension=html
      url=$ietf/$extension/rfc$rfc
    else
      extension=txt
      url=$ietf/rfc/rfc$rfc.$extension
    fi

    if [ ! -d $rfcdir ]; then
      mkdir $rfcdir
    fi

    if [ ! -f $rfcdir/$rfc.$extension ]; then
      wget -q $url -O $rfcdir/$rfc.$extension
      if [[ $? != 0 ]]; then
        /bin/rm -f $rfcdir/$rfc.$extension
      fi
    fi

    if [ -n $PAGER ] ; then
      PAGER=less
    fi

    if [ -f $rfcdir/$rfc.$extension ]; then
      if [[ $2 == "-l" ]] ; then
        lynx $rfcdir/$rfc.$extension
      else
        cat $rfcdir/$rfc.$extension | $PAGER
      fi
    else
      echo "RFC Not Found"
    fi
  }

  # ---------------------------------------------------------------------------
  # Gaming
  menv_export MCHOME=~/.minecraft
  menv_alias mc="java -Xmx2048M -Xms512M -cp i"\
    "minecraft.jar net.minecraft.LauncherFrame"
  menv_alias mcs="java -Xmx2048M -Xms1024M -jar i"\
    "minecraft_server.jar nogui"

  # This just works for my epsom box... The only box I play minecraft on.
  menv_export LD_LIBRARY_PATH="/lib/jvm/java-1.7.0-openjdk-1.7.0.9.x86_64/jre/lib/amd64/"

  # A function which downloads the minecraft jar launcher file.
  menv_function mclauncher
  function mclauncher {
    echo "Downloading Minecraft jar."
    wget -O minecraft.jar \
      "https://s3.amazonaws.com/MinecraftDownload/launcher/minecraft.jar"
  }

  menv_alias mcdv="rm ${MCHOME}/bin/version"
  menv_alias mcjarspc="ln -s ${MCHOME}/bin/minecraftspc.jar \
    ${MCHOME}/bin/minecraft.jar"
  menv_alias mcjarmc=" ln -s ${MCHOME}/bin/minecraftmc.jar \
    ${MCHOME}/bin/minecraft.jar"

  # NOTE: I can set the mc homedir with this arg: mc -Duser.home=$DIR

  # Function to install single player commands into minecraft.
  menv_function mcspc
  function mcspc {
    /bin/rm -rf mc
    mkdir mc
    cd mc

    echo "Downloading Single Player Commands Plugin."
    wget -O spc.zip "http://bit.ly/10ZwXQ5"
    mkdir spc
    unzip -qq -d spc spc.zip
    /bin/rm -f spc.zip

    echo "Backing up MCHOME"
    /bin/cp --backup=numbered -R ${MCHOME} ~/backup/

    echo "Extracting minecraft.jar"
    unzip -qq -d minecraftjar ${MCHOME}/bin/minecraft.jar

    echo "Creating new minecraft.jar"
    /bin/rm -rf minecraftjar/META-INF
    /bin/cp -R spc/com minecraftjar
    /bin/cp -R spc/*.class minecraftjar

    cd minecraftjar
    zip -q -r ../minecraftspc.jar *
    cd ..

    echo "Moving jar files to ${MCHOME}."
    cp spc/*.jar ${MCHOME}/bin/
    cp minecraftspc.jar ${MCHOME}/bin/minecraftspc.jar

    cd ..
    /bin/rm -rf mc
  }

  menv_function mclib
  function mclib {
    /bin/rm -rf mc
    mkdir mc
    cd mc

    echo "Downloading Latest LWJGL."
    wget -O lwjgl.zip http://sourceforge.net/projects/java-game-lib/files/Official%20Releases/LWJGL%202.8.5/lwjgl-2.8.5.zip/download
    unzip lwjgl.zip

    function cptomc {
      cp "lwjgl-2.8.5/jar/${1}" ${MCHOME}/bin/
    }

    cptomc jinput.jar
    cptomc lwjgl.jar
    cptomc lwjgl_util.jar
    unset cptomc

    function cptomc {
      cp "lwjgl-2.8.5/native/linux/${1}" ${MCHOME}/bin/natives/
    }

    cptomc libjinput-linux.so
    cptomc libjinput-linux64.so
    cptomc liblwjgl.so
    cptomc liblwjgl64.so
    cptomc libopenal.so
    cptomc libopenal64.so
    unset cptomc

    cd ..
    /bin/rm -rf mc
  }

  # Function to backup my ii map in mc.
  menv_function mcbkii
  function mcbkii {
    ii="${HOME}/.minecraft/saves/Imperium Infinitus"

    tar czf ii.tgz "${ii}"
    /bin/mv --backup=numbered ii.tgz ~/backup/
  }

  # ---------------------------------------------------------------------------

  # Source a local nonlogin script if one exists.
  if [ -f ~/menv_local_nonlogin ]; then
  	source ~/menv_local_nonlogin
  fi

  # Source global definitions
  if [ -f /etc/bashrc ]; then
  	source /etc/bashrc
  fi
}

################################################################################
# This function loads vimplugins.
menv_function vimplugins
function vimplugins {

  function githubz {
    echo "Installing vim pathogen plugin $1."
    githubf $1/archive/master.zip
    unzip -qq master.zip
    /bin/rm -f master.zip
    mv "$(basename $1)-master" $(basename $1)
  }

  pushd .

  /bin/rm -rf ~/.vim

  echo "Install vim pathogen plugin handler."

  mkdir -p ~/.vim/autoload ~/.vim/bundle
  curl -Sso ~/.vim/autoload/pathogen.vim \
   https://raw.github.com/tpope/vim-pathogen/master/autoload/pathogen.vim

  cd ~/.vim/bundle
  githubz scrooloose/nerdtree
  githubz myusuf3/numbers.vim
  # githubz gmarik/vundle
  # githubz valloric/YouCompleteMe

  cd ~/.vim
  githubz Rip-Rip/clang_complete
  /bin/cp -R clang_complete/* .
  /bin/rm -rf clang_complete

  unset githubz

  mkdir -p ~/.vim/plugins
  cd ~/.vim/plugins

  echo "Installing cscope plugin."
  fetch http://cscope.sourceforge.net/cscope_maps.vim

  popd
}

################################################################################
# Prints a nice message of the day with a whole bunch of useful information.
menv_function menv_motd
function menv_motd {
  # Terminal colors, assuming 256 colors.
  TC_RESET="[0m"
  TC_SKY="[0;37;44m"
  TC_GRD="[0;30;42m"
  TC_TEXT="[38;5;203m"

  echo -n "${TC_SKY}
              ( \`   )_                                                         |
             (    )    \`)                                                      |
           (_   (_ .  _) _)                                                    |
                                          _                                    |
                                         (  )                                  |
          _ .                         ( \`  ) . )                               |
        (  _ )_                      (_, _(  ,_)_)                             |
      (_  _(_ ,)                                                               |
                                                                               |
${TC_TEXT}[44m                ##     ##  #######  ##    ##  #######  ##    ##                |
                ###   ### ##     ## ##   ##  ##     ## ###   ##                |
                #### #### ##     ## ##  ##   ##     ## ####  ##                |
                ## ### ## ##     ## #####    ##     ## ## ## ##                |
                ##     ## ##     ## ##  ##   ##     ## ##  ####                |
                ##     ## ##     ## ##   ##  ##     ## ##   ###                |
                ##     ##  #######  ##    ##  #######  ##    ##                |
${TC_SKY}                                                                               |
               _  _                                                            |
              ( \`   )_                                                         |
             (    )    \`)                                                      |
           (_   (_ .  _) _)                                                    |
                                                        (  )                   |
                      _, _ .                         ( \`  ) . )                |
                     ( (  _ )_                      (_, _(  ,_)_)              |
                   (_(_  _(_ ,)                                                |
                                                                               |
${TC_GRD}"

  echo -e "\n                           Welcome to Mokon's Linux!                           \n"

  echo -n "${TC_GRD}"
  nodeinfo
  echo ${TC_RESET}
}

menv_function urldiff
function urldiff {
  if [[ $1 == http* ]] ; then
    file1=`mktemp`
    fetch $1 $file1
  else
    file1=$1
  fi

  if [[ $2 == http* ]] ; then
    file2=`mktemp`
    fetch $2 $file2
  else
    file2=$2
  fi

  diff $file1 $file2
  ret=$?

  if [[ $1 == http* ]] ; then
    /bin/rm $file1
  fi

  if [[ $2 == http* ]] ; then
    /bin/rm $file2
  fi

  return $ret
}

# A function to test if a connection exists to the given server.
menv_function testconnection
function testconnection {
  server=$1
  suc_msg=$2
  err_msg=$3
  dns_err_msg=$4
  ping -c1 -W1 "$server" &> /dev/null
  if [ $? ]; then
    echo $suc_msg
  else
    host $?
    if [ $? ]; then
      echo $err_msg
    else
  	  echo $dns_err_msg
    fi
  fi
}

menv_function nodeinfo {
function nodeinfo {
  MEMT=`cat /proc/meminfo | grep MemTotal`
  SWAT=`cat /proc/meminfo | grep '^SwapTotal:'`
  PMODEL=`cat /proc/cpuinfo | \
    grep '^model name' | awk '{print $4 $5 $6}' | head -1`
  PMHZ=`cat /proc/cpuinfo | \
    grep '^cpu MHz' | awk '{print $4}'| sed -e 's/\.[0-9]*//g' | head -1`
  PVENDOR=`cat /proc/cpuinfo | \
    grep '^vendor_id' | awk '{print $3}' | head -1`
  PNUMS=`cat /proc/cpuinfo | \
    grep '^processor' | wc -l | awk '{print $1}' | head -1`

  echo "OS............: `uname -o`"
  echo "Hostname......: `uname -n`"
  echo "Address(es)...: `/sbin/ifconfig | grep "inet" \
                           | grep -v '127.\|::1\|fe80::' | awk '{print $2}' \
                           | sed ':a;N;$!ba;s/\n/\n..............: /g'` "
  echo "Kernel........: `uname -s ` `uname -r` `uname -v`"
  echo "Machine HW....: `uname -m`"
  echo "Uptime........:`uptime | sed 's/.*up ([^,]*), .*/1/'`"
  echo "Memory........: `echo $MEMT | awk {'print $2'}` `echo $MEMT \
                                    | awk {'print $3'}`"
  echo "SWAP..........: `echo $SWAT | awk {'print $2'}` `echo $SWAT \
                                    | awk {'print $3'}`"
  echo "Username......: `whoami`"
  echo "Processor(s)..: $PNUMS $PVENDOR ${PMHZ} MHz ${PMODEL}"

  echo "Reachability..:"
  echo -n "..............: "
  testconnection "8.8.8.8" "Google DNS Reachable" "Google DNS Not Reachable" ""

  echo -n "..............: "
  testconnection "google.com" "Google Reachable" "Google Not Reachable" \
    "DNS Failure"

  cmdexists git
  if [ $? ] ; then
    menv_version=`git ls-remote $menv_git_loc|grep HEAD|awk '{print $1}'`
  else
    menv_version="(unknown, install git to retrieve menv version)"
  fi
  echo "menv version..: $menv_version"

  echo -n "..............: "
  ping -c1 -W1 github.com &> /dev/null
  if [ $? ]; then
    urldiff $menv_loc ~/menv &> /dev/null
    if [ $? == 0 ]; then
      echo "menv script up to date."
    else
      echo "menv script different than github. Please upgrade."
    fi

    urldiff $vimrc_loc ~/.vimrc &> /dev/null
    echo -n "..............: "
    if [ $? == 0 ]; then
      echo "menv vimrc up to date."
    else
      echo "menv vimrc different than github. Please upgrade."
    fi
  else
    echo "Git Hub not reachable. Could not check if menv is up to date."
  fi
}

menv_function menv_help
function menv_help {
  curl -s https://raw.github.com/Mokon/menv/master/README | less
}

################################################################################
# Execute the script.
menv_main

