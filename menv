#!/bin/bash

################################################################################
#
# The following is a specialized script to setup a linux enviornment that has
# everything setup just the way I like it. It is also self contained in that
# a single wget and execution of the script should setup everything.
#
# This script will setup things such as your bashrc file and bash_profile. It
# also setups a .vimrc file and installs a bunch of plugins.
#
# The first time you install this file run:
#   cd ~
#   wget -q -N --no-check-certificate https://raw.github.com/Mokon/menv/master/menv
#   chmod +x menv
#   ./menv
# From then on to update the script called:
#   ~/menv_deploy
# Never edit any of the menv files directly. Always edit in the git repo.
#
# (C) 2013 David 'Mokon' Bond, All Rights Reserved
#
################################################################################

# The location of this system on github.
mprofile_loc="https://raw.github.com/Mokon/menv/master/menv"

# Aux function to test if a command exists.
function exists {
    test -x "$(command -v "$1")"
}

# Aux function to wget a file.
function fetch {
  command -v wget >/dev/null 2>&1 || { echo >&2 "wget not found"; return ;}
  wget -q -N --no-check-certificate ${1}
}

################################################################################
# A main function which determines how this program was called.
function main {
  case ${BASH_SOURCE[0]} in
    *menv) menv ;;
    *menv_deploy) menv_deploy ;;
    *menv_cleanup) menv_cleanup ;;
    *.bash_profile|*.profile) login ;;
    *.bash_aliases)
      echo "No support for bash_aliases. Aliases found in bashrc." ;;
    *.bashrc) nonlogin ;;
    *) echo "Unknown menv invocation" ;;
  esac
}

##############################################################################t#
# Sets up the environment from scratch.
function menv {
  echo "Setting up the Mokon Environment."

  pushd .

  cd ~

  # Aux function to setup a menu symbolic link. Backing up w/e was there before.
  function menv_link {
    if [ -f $1 ] && { [ ! -L $1 ] || 
        { [ -L $1 ] && [ `readlink $1` != "menv" ] ; } ; } ; then
      echo "Found foreign ${1}. Backing up as ${1}_backup."
       /bin/mv --backup=numbered $1 $1_backup
    elif [ -f $1 ] ; then
      echo "Found valid $1 file."
    fi
    if [ ! -f $1 ] ; then
      ln -s menv $1
      echo "Created $1 file."
    fi
  }

  menv_link menv_deploy
  menv_link menv_cleanup
  menv_link .bashrc
  menv_link .bash_profile

  grep "\"menv generated vimrc" .vimrc &> /dev/null
  if [ $? == 0 ] ; then
    echo "Found menv vimrc. Clearing."
    /bin/rm -f .vimrc
  elif [ -f .vimrc ] ; then
    /bin/mv --backup=numbered .vimrc vimrc_backup
    echo "Found foreign vimrc. Backing up as vimrc_backup."
  fi
  vimrc &> .vimrc
  vimplugins

  [ ! -d trash ] &&  mkdir trash &&
    echo "Created trash directory." || echo "Found trash directory"

  if [ -f menv_local_nonlogin ]; then
    echo "Found ~/menv_local_nonlogin."
  fi

  if [ -f menv_local_login ]; then
    echo "Found ~/menv_local_login."
  fi
  popd
}

################################################################################
# Attempts to deploy a basic menv setup on the system.
function menv_deploy {
  pushd .
  cd ~
  fetch ${mprofile_loc}
  chmod +x menv
  source ~/.bashrc
  popd
}

################################################################################
# Attempts to cleanup menv
function menv_cleanup {
  function if_sym_delete {
    if [ -L $1 ]; then
      /bin/rm -f $1
    fi
  }

  pushd .
  cd ~

  if_sym_delete .bashrc
  if_sym_delete .bash_profile
  if_sym_delete menv_deploy
  if_sym_delete menv_cleanup

  unalias -a

  popd
}

################################################################################
# Run on login this is essentially the bash_profile script.
function login {
  if [ -f ~/.bashrc ]; then
	  source ~/.bashrc
  fi

  PATH=$PATH:$HOME/bin

  export PATH

  # Source a local login script if one exists.
  if [ -f ~/menv_local_login ]; then
  	source ~/menv_local_login
  fi
}

################################################################################
# Run on nonlogin and login this is essentially the bashrc script.
function nonlogin {
  motd

  # Unalias just in case we have aliases from another script run lying around.
  unalias -a

  # I like to keep my prompt simple...
  TC_GRE="\[\033[0;32;40m\]"
  TC_RESET="\[\033[0;0m\]"
  PS1="${TC_GRE}i:${TC_RESET}"

  umask 022

  # Setup editor, vim perfered.
  export EDITOR=ed
  exists emacs && EDITOR=emacs;
  exists vi && EDITOR=vi;
  exists vim && EDITOR=vim;

  # General util.
  alias rm='mv --target-directory ~/trash'
  alias delete_immediately='/bin/rm -Rf'
  alias empty_trash='/bin/rm -rf ~/trash/*'
  alias mv='mv -i'
  alias ps="ps -aux"
  alias e="exit"
  alias ex="exit"
  alias exi="exit"
  alias extract="tar -xzvf"
  alias build-essentials="yum groupinstall 'Development Tools'"
  alias ls="ls --color"
  alias rpm_list_deps="rpm -qpR"
  alias bx="source ~/.bashrc"

  function vin {
    vim +$2 $1
  }

  alias gits="git status -s"
  alias gitic="git commit -m \"Initial Commit\""
  alias gitc="git commit -am "
  alias gitsync="git push origin master"
  alias gitsetup="git config --global user.name \David Bond\" ; \
                  git config --global user.email mokon@mokon.net ; \
                  git commit --amend --reset-author"

  function githubf {
    fetch https://github.com/$1
  }

  function githubc {
    git clone https://github.com/$1
  }

  # Simple function for my dev box which has menv checked out in git. This
  # allows me to test menv on the box before I push it to github.
  if [ -d ~/git/menv ]; then
    function menv_stage {
      pushd .
      cd ~/git/menv/

      cp menv ~
      source ~/menv
      source ~/.bashrc

      popd
    }
  fi

  alias menv_info="ls -alt |grep \"bash\|menv\""

  # Programming related
  alias svn_add_dir_only="svn add --depth=empty"
  alias xval="valgrind --track-origins=yes --leak-check=full --show-reachable=yes"
  alias sval="xval --gen-suppressions=yes --demangle=no"
  alias ct="cleartool"
  alias cscopeR="cscope -R"
  alias cscopeD="cscope -d"

  function cscopeinit {
    find `realpath .` -name '*.c' -o -name '*.h' -o -name '*.cpp' -o -name '*.hpp' \
      > ./cscope.files
    cscope -b
    CSCOPE_DB=`realpath cscope.out`
    export CSCOPE_DB
  }

  export GLOG_minloglevel=1

  function lsdiff {
    ls -R $1 |grep -v "\/" &> /tmp/ls1.diff
    ls -R $2 |grep -v "\/" &> /tmp/ls2.diff
    diff /tmp/ls1.diff /tmp/ls2.diff
  }

  # Gaming
  alias mc="java -Xmx2048M -Xms512M -cp minecraft.jar net.minecraft.LauncherFrame"

  #HISTCONTROL=ignoreboth
  HISTSIZE=10000
  #HISTFILE=~/.bash.log
  #HISTFILESIZE=
  #HISTTIMEFORMAT='%F %T%t'

   LS_COLORS="rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=01;05;37;41:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.tbz=01;31:*.tbz2=01;31:*.bz=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=01;36:*.au=01;36:*.flac=01;36:*.mid=01;36:*.midi=01;36:*.mka=01;36:*.mp3=01;36:*.mpc=01;36:*.ogg=01;36:*.ra=01;36:*.wav=01;36:*.axa=01;36:*.oga=01;36:*.spx=01;36:*.xspf=01;36:*.c=01;31:*.h=08;36:"

  count_c_files( ) {
    HFILES=`find $1 -type f -name "*.h" `
    CFILES=`find $1 -type f -name "*.c" `
    HLC=`wc -l $HFILES 2> /dev/null | tail -1 | awk '{print $1}'`
    CLC=`wc -l $CFILES 2> /dev/null | tail -1 | awk '{print $1}'`
    TLC=`expr $HLC + $CLC`

    echo "HCL = $HLC, CLC = $CLC, TLC = $TLC"
  }

  tree_list( ) {
    ls -R $1 | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'
  }

  mgrep( ) {
    grep -rn $1 $2 |grep -v .svn |grep -v Binary
  }


  # Source a local nonlogin script if one exists.
  if [ -f ~/menv_local_nonlogin ]; then
  	source ~/menv_local_nonlogin
  fi

  # Source global definitions
  if [ -f /etc/bashrc ]; then
  	source /etc/bashrc
  fi
}

################################################################################
# This function creates a vimrc file. It is intending to be redirected into a
# file.
function vimrc {
  echo "
\"imenv generated vimrc
\" source http://amix.dk/vim/vimrc.html
execute pathogen#infect()
syntax on
filetype plugin indent on
syntax enable
autocmd FileType make setlocal noexpandtab
set pastetoggle=<F2>
if exists('+colorcolumn')
  set colorcolumn=80
endif
set ai
highlight ColorColumn ctermbg=lightgrey guibg=lightgrey
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%81v.\+/
\"highlight WhitespaceEOL ctermbg=red guibg=red
\"match WhitespaceEOL /\s\+$/
autocmd VimEnter * NERDTree
autocmd BufEnter * NERDTreeMirror
autocmd VimEnter * wincmd w

set nocp
set tabstop=2 shiftwidth=2 expandtab
set autoread
set wildmenu
set ruler
set hid
set cmdheight=2
set smartcase
set ignorecase
set hlsearch
set showmatch

autocmd BufReadPost *
     \ if line(\"'\\\"\") > 0 && line(\"'\\\"\") <= line(\"$\") |
     \   exe \"normal! g\`\\\"\" |
     \ endif
set laststatus=2
set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l

map <leader>ss :setlocal spell!<cr>

map <C-n> :NERDTreeToggle<CR>
set number
nnoremap <F3> :NumbersToggle<CR>
nnoremap <F4> :NumbersOnOff<CR>

function! <SID>StripTrailingWhitespace()
    \" Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    \" Do the business:
    %s/\s\+$//e
    \" Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
nmap <silent> <leader><space> :call <SID>StripTrailingWhitespace()<CR>

\" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
      return 'PASTE MODE  '
    en
    return ''
endfunction
"
}

################################################################################
# This function loads vimplugins.
function vimplugins {

  function githubz {
    echo "Installing vim pathogen plugin $1."
    /bin/rm -rf $1
    githubf $1/archive/master.zip
    unzip -qq master.zip
    /bin/rm -f master.zip
    mv "$(basename $1)-master" $(basename $1)
  }

  pushd .

  /bin/rm -rf ~/.vim/autoload
  /bin/rm -rf ~/.vim/bundle

  echo "Install vim pathogen plugin handler."

  mkdir -p ~/.vim/autoload ~/.vim/bundle
  curl -Sso ~/.vim/autoload/pathogen.vim \
   https://raw.github.com/tpope/vim-pathogen/master/autoload/pathogen.vim

  cd ~/.vim/bundle
  githubz scrooloose/nerdtree
  githubz myusuf3/numbers.vim

  mkdir -p ~/.vim/plugins
  cd ~/.vim/plugins

  echo "Installing cscope plugin."
  fetch http://cscope.sourceforge.net/cscope_maps.vim

  popd
}

################################################################################
# Prints a nice message of the day with a whole bunch of useful information.
function motd {

  # Terminal colors, assuming 256 colors.
  TC_RESET="[0m"
  TC_SKY="[0;37;44m"
  TC_GRD="[0;30;42m"
  TC_TEXT="[38;5;203m"

  echo -n "${TC_SKY}
              ( \`   )_                                                         |
             (    )    \`)                                                      |
           (_   (_ .  _) _)                                                    |
                                          _                                    |
                                         (  )                                  |
          _ .                         ( \`  ) . )                               |
        (  _ )_                      (_, _(  ,_)_)                             |
      (_  _(_ ,)                                                               |
                                                                               |
${TC_TEXT}[44m                ##     ##  #######  ##    ##  #######  ##    ##                |
                ###   ### ##     ## ##   ##  ##     ## ###   ##                |
                #### #### ##     ## ##  ##   ##     ## ####  ##                |
                ## ### ## ##     ## #####    ##     ## ## ## ##                |
                ##     ## ##     ## ##  ##   ##     ## ##  ####                |
                ##     ## ##     ## ##   ##  ##     ## ##   ###                |
                ##     ##  #######  ##    ##  #######  ##    ##                |
${TC_SKY}                                                                               |
               _  _                                                            |
              ( \`   )_                                                         |
             (    )    \`)                                                      |
           (_   (_ .  _) _)                                                    |
                                                        (  )                   |
                      _, _ .                         ( \`  ) . )                |
                     ( (  _ )_                      (_, _(  ,_)_)              |
                   (_(_  _(_ ,)                                                |
                                                                               |
${TC_GRD}"

  echo -e "\n                           Welcome to Mokon's Linux!                           \n"

  MEMT=`cat /proc/meminfo | grep MemTotal`
  SWAT=`cat /proc/meminfo | grep '^SwapTotal:'`
  PMODEL=`cat /proc/cpuinfo | \
    grep '^model name' | awk '{print $4 $5 $6}' | head -1`
  PMHZ=`cat /proc/cpuinfo | \
    grep '^cpu MHz' | awk '{print $4}'| sed -e 's/\.[0-9]*//g' | head -1`
  PVENDOR=`cat /proc/cpuinfo | \
    grep '^vendor_id' | awk '{print $3}' | head -1`
  PNUMS=`cat /proc/cpuinfo | \
    grep '^processor' | wc -l | awk '{print $1}' | head -1`

  echo "OS............: `uname -o`"
  echo "Hostname......: `uname -n`"
  echo "Address.......: `/sbin/ifconfig | grep "inet" | grep -v '127.\|::1' \
                                        | awk '{print $2}' | tr '\n' '\t'` "
  echo "Kernel........: `uname -s ` `uname -r` `uname -v`"
  echo "Machine HW....: `uname -m`"
  echo "Uptime........:`uptime | sed 's/.*up ([^,]*), .*/1/'`"
  echo "Memory........: `echo $MEMT | awk {'print $2'}` `echo $MEMT \
                                    | awk {'print $3'}`"
  echo "SWAP..........: `echo $SWAT | awk {'print $2'}` `echo $SWAT \
                                    | awk {'print $3'}`"
  echo "Username......: `whoami`"
  echo "Processor(s)..: $PNUMS $PVENDOR ${PMHZ} MHz ${PMODEL}"

  echo ${TC_RESET}
}

################################################################################
# Execute the script.
main

