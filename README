(C) 2013 David 'Mokon' Bond, All Rights Reserved

Welcome, to menv: a specialized script to setup a linux environment just the
way I like it. With a single remote execution of a bash script menv will
install itself. You can do this with:

  bash <(curl -s https://raw.github.com/Mokon/menv/master/core/remote_install)

This script will setup things such as your bashrc file and bash_profile. It
also setups a .vimrc file and installs a bunch of plugins for vim. It is
basically a single bash script file which creates a bunch of links to the
various dotfiles (or in the case of non-bash rc files it downloads a file from
git). In general it is very modular and if you don't want to use vim (for
instance if you are an emacs person) you can configure it to work how you want.

When you run the remote install script essentially it does a wget on the menv
repo and then runs an installation script.

From then on to update the script called:
  menv_update

To uninstall the script call:
  menv_uninstall

Sometimes I have private aliases for work or that just run on a single box. For
these you can edit the files:
  ~/menv/local/menv_local_login
and
  ~/menv/local/menv_local_nonlogin
These will be sourced in the correct location (bashrc or bash_profile).

There are also several useful functions relating to menv. The first is:
  menv_stage
This command works assuming you have menv cloned from github at ~/git/menv. It
copies the files from that folder and installs them on the system. This allows
me to test a script before I push it out to github.

The command:
  menv_help
Displays this README file on the terminal.

The command:
  menv_refresh
Executes ~/.bash_profile to execute any additions to the local menv files. This
is useful to get the additions into you envirnment without having to relauch
the terminal.

menv does not require internet connectivity to run on a daily basis but to
install or update it you do need the internet.

menv tries to be a good citizen, backing up files not belonging to it and
giving you a good way to uninstall it.

Never edit any of the menv files directly. Always edit in the git repo. If you
wish to use this I suggest forking my github repo and then editing the file
menv/local/config to exclude the functionality you wish to exclude. In general
for each of the target (install, login, update, logout, nonlogin, and uninstall)
they have ${target}.d/ folder where all the files in this directory are included
by the parent script. If you want to add your own aliases etc this is the place
to do it. If you want to for instance exclude my git configuations these are the
folders that the exclude patterns in your config will operate on.

