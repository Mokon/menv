#!/bin/bash
# (C) 2013-2015 David 'Mokon' Bond, All Rights Reserved

menv_alias gd="git difftool -t meld -y -M50"
menv_alias gits="git status -s"
menv_alias gitic="git commit -m \"Initial Commit\""
menv_alias gitc="git commit -am "
menv_alias gitpush="git push origin master"
menv_alias gitamendauthor="git commit --amend --reset-author"
menv_alias gitdo="git diff origin"
menv_alias gitdh="git diff HEAD"
menv_alias git_cleanup_repo="$BINRM \`git ls-files --other\`"
menv_alias gitcp="git cherry-pick -x"
menv_alias gitcdiff="git diff --staged --color-words --word-diff-regex=\"[^[:space:]]|([[:alnum:]]|UTF_8_GUARD)+\""
menv_alias git_mk_branch="git checkout -b"
menv_alias git_push_local_branch="git push -u origin"
menv_alias git_graphical_diff_xxdiff="git difftool -t xxdiff -y"
menv_alias git_graphical_diff_meld="git difftool -t meld -y"
menv_alias git_graphical_diff_kdiff3="git difftool -t kdiff3 -y"
menv_alias git_graphical_diff_kompare="git difftool -t kompare -y"
menv_alias git_graphical_diff="git difftool -t meld -y &> /dev/null"
menv_alias git_stash_keep_index="git stash -k"
menv_alias git_text_colordiff="git difftool --extcmd='colordiff -ydw --suppress-common-lines -C 10' -y"
menv_alias git_text_diff="git difftool --extcmd='colordiff -ydw \$LOCAL \$REMOTE | grep -E -C3 \'^.{123} [|<>]( |$)\'  ' -y"
menv_alias git_tree="git log --graph --all --pretty=oneline"
menv_alias git_log_fuller="git log --pretty=fuller"
menv_alias git_log_t="git log --pretty=\"format:%C(yellow)%h %ad%Cred%d %Creset%s%Cblue [%cn]\" --decorate --date=relative"
menv_alias git_files="git show --name-only --oneline"
menv_alias git_label="git show --pretty=format:'%h %<(20,trunc)%an %ad %<(20,trunc)%s' --date=short --quiet"
menv_alias git_stash_non_staged="git stash -k -u"
menv_alias show_git_urls="find . -maxdepth 1 -type d -execdir git --git-dir {}/.git config --get remote.origin.url \;"
menv_alias git_stats="git diff --numstat"

menv_function git_stash_diff
function git_stash_diff {
  local index=${1:-0}

  git stash show -p stash@{$index}
}

# Function to clone from github.
menv_function githubc
function githubc {
  local repo=$1

  git clone https://github.com/$repo
}

# Function to git blame a sigal line.
menv_function git_blame_line
function git_blame_line {
  local file=$1
  local line=$2

  git blame $file -L $line,$line -l
}

menv_function git_diff_moved_file
function git_diff_moved_file {
  local from=$1
  local to=$2

  git diff HEAD:$from $to
}

menv_function git_find_and_replace_all
function git_find_and_replace_all {
  local oldtext=$1
  local newtext=$2

  grep -rl $oldtext . | xargs sed -i "s/$oldtext/$newtext/g"
}

menv_function stash_cmdline_install
function stash_cmdline_install {
  gem install atlassian-stash
  stash configure
  # Create a pull request from 'myBranch' into 'master' with 'michael' as a reviewer
  # stash pull-request myBranch master @michael

  # Create a pull request from the current branch into 'master'
  # stash pull-request master
  # git create-pull-request master
}

# from
# http://stackoverflow.com/questions/8259851/using-git-diff-how-can-i-get-added-and-modified-lines-numbers
menv_function diff_lines
function diff_lines {
    local path=
    local line=
    while read; do
        esc=$'\033'
        if [[ $REPLY =~ ---\ (a/)?.* ]]; then
            continue
        elif [[ $REPLY =~ \+\+\+\ (b/)?([^[:blank:]$esc]+).* ]]; then
            path=${BASH_REMATCH[2]}
        elif [[ $REPLY =~ @@\ -[0-9]+(,[0-9]+)?\ \+([0-9]+)(,[0-9]+)?\ @@.* ]]; then
            line=${BASH_REMATCH[2]}
        elif [[ $REPLY =~ ^($esc\[[0-9;]+m)*([\ +-]) ]]; then
            echo "$path:$line:$REPLY"
            if [[ ${BASH_REMATCH[2]} != - ]]; then
                ((line++))
            fi
        fi
    done
}

menv_function git_diff_annotate_lines
function git_diff_annotate_lines {
  git diff $* | diff_lines
}

menv_function strip_trailing_whitespace
function strip_trailing_whitespace {
  local filename=$1
  sed -i 's/ *$//' $filename
}

menv_function git_changes_strip_trailing_whitespace
function git_changes_strip_trailing_whitespace {
  files=$(git diff --name-only $@)
  for file in $files ; do
    strip_trailing_whitespace $file
  done
}

menv_function show_git_origins
function show_git_origins {
  for dir in */; do
    ( cd $dir && git config --get remote.origin.url)
  done
}

if [ -f $menv_bin_dir/git-completion.bash ]; then
    source $menv_bin_dir/git-completion.bash
fi
