#!/bin/bash
# (C) 2013-2015 David 'Mokon' Bond, All Rights Reserved

menv_alias cscope="cscope -p100"
menv_alias cscopeR="cscope -R -p100"
menv_alias cscopeD="cscope -d -p100"

# Function to init a cscope database with absolute filenames.
menv_function cscopeinit
function cscopeinit {
  find `realpath .` -not '(' -path '*.pc*' ')' -and  '(' -name '*.c' -o -name '*.h' \
    -o -name '*.cpp' -o -name '*.hpp' ')' -execdir realpath {} \; > ./cscope.files 2> /dev/null
  cscope -b
  menv_export CSCOPE_DB=`realpath cscope.out`
  /bin/rm ./cscope.files
}

menv_function cscope_update
function cscope_udpdate {
  if [ -f cscope.out ] ; then
    menv_export CSCOPE_DB=`realpath cscope.out`
  fi
}

menv_function cscope_vim_help
function cscope_vim_help {
   cat << HELP
     The following is a little help file to remind me how to use cscope with
     vim as I am always forgetting how to do it.

     1) First ensure the cscope mapping files is loaded. menv should take care
        of this.
     2) Next create you cscope file. The alias cscopeinit will do this.
        Essentially the mapping file will either load the cscope.out in the
        local dir for the cscope file specified in CSCOPE_DB. This alias sets
        this up using absolute file names so it will work from anywhere.
     3) To open a tag (function etc) from the command line use 'vim -t main'
     4) When in vim put your cursor over the desired tag and enter a hotkey
        combo. Some useful ones include :
          CTRL-\ t: to find all uses of a function, type, etc.
          CTRL-\ g: to find the global definition of a function, type, etc.
          CTRL-O: send you back to the location before the last search
HELP
}

