#!/bin/bash
# (C) 2013-2019 David 'Mokon' Bond, All Rights Reserved

alias xval="valgrind --track-origins=yes --leak-check=full "\
  "--show-reachable=yes --num-callers=100"
alias rval="valgrind --tool=memcheck --leak-check=full "\
  "--show-reachable=no --undef-value-errors=no --track-origins=no "\
  "--child-silent-after-fork=no --trace-children=no --num-callers=100 --fair-sched=yes"
alias sval="xval --gen-suppressions=yes --demangle=no"
alias profvis="kcachegrind"
alias prof="valgrind --tool=callgrind"
alias visual_memcheck="valkyrie"
alias gdbv="valgrind --vgdb=yes --vgdb-error=0"
alias gval="rval --vgdb=yes --vgdb-error=0"
alias gdbr="(echo r ; cat) | gdb --args"
alias gdb_run="gdb --eval-command=run --args"
alias gdb_oneshot="gdb --eval-command=run --eval-command=quit --args"
alias xmlval="valgrind --tool=memcheck --leak-check=full  --show-reachable=no --undef-value-errors=no --track-origins=no  --child-silent-after-fork=no --trace-children=no --xml=yes --xml-file=xmlval.%p.memcheck"

function gprof {
  gprof $1 gmon.out &> profileinfo.out
}

alias list_core_dumps="ls -Alt /var/lib/systemd/coredump"

function find_newest_file {
  local dir="$1"
  local name_pattern="$2"
  find "$dir" -name "$name_pattern" -type f -printf "%T@ %p\n" \
    | sort -n | sed -r 's/^[0-9.]+\s+//' | tail -n 1
}

function extract_core_dump {
  local core=$1
  local bncore=$(basename $core)

  sudo cp ${core}.xz .
  sudo xz -d ${bncore}.xz
  sudo chown $USER ${bncore}
}

function extract_latest_core_dump {
  local core=$(find_newest_file /var/lib/systemd/coredump/ "core.*.xz" \
               | rev | cut -f 2- -d '.' | rev)
  extract_core_dump $core
}

alias delete_all_cores="sudo /bin/rm -rf /var/lib/systemd/coredump/core.*.xz"

function gdb_process {
  local pid=$1

  local re='^[0-9]+$'
  if ! [[ $pid =~ $re ]] ; then
    pid=$(pgrep $pid)
  fi

  if [ -z $pid ] ; then
    echo "process not found"
  else
    shift
    sudo gdb -p $pid "$@"
  fi
}

function get_process_stack {
  local pid=$1

  gdb_process $1 -ex "thread apply all bt" -batch
}

alias interactive_decode="addr2line -e "
function decode_stacktrace {
  local stacktrace=${1}
  local symbol_file=${2}
  local source_dir=${3}

  while read line ; do
    local regex="^(.*)\\(*0x([0-9a-fA-F]+)\\)\\[0x([0-9a-fA-F]+)\\]$"
    if [[ "${line}" =~ ${regex} ]] ; then
      local gdbscript=`mktemp`
      cat << END > ${gdbscript}
        directory ${source_dir}
        file ${symbol_file}
        info symbol 0x${BASH_REMATCH[2]}
        list *0x${BASH_REMATCH[2]}
        quit
END
      gdb -q -x ${gdbscript}
    fi
  done < ${stacktrace}
}

alias web_gdb="gdbgui -n --host 0.0.0.0 -p 1338 --args"

alias show_core_dumps="coredumpctl list"
