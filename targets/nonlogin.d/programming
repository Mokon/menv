#!/bin/bash
# (C) 2013 David 'Mokon' Bond, All Rights Reserved

menv_alias xval="valgrind --track-origins=yes --leak-check=full "\
  "--show-reachable=yes"
menv_alias sval="xval --gen-suppressions=yes --demangle=no"
menv_alias ct="cleartool"
menv_alias cscope="cscope -p100"
menv_alias cscopeR="cscope -R -p100"
menv_alias cscopeD="cscope -d -p100"
menv_alias profvis="kcachegrind"
menv_alias prof="valgrind --tool=callgrind"

menv_function gprof
function gprof {
  gprof $1 gmon.out &> profileinfo.out
}

# Function to init a cscope database with absolute filenames.
menv_function cscopeinit
function cscopeinit {
  find `realpath .` -name '*.c' -o -name '*.h' -o -name '*.cpp' \
    -o -name '*.hpp' > ./cscope.files
  cscope -b
  CSCOPE_DB=`realpath cscope.out`
  menv_export CSCOPE_DB
}
  
menv_function cscope_help
function cscope_vim_help {
   cat << HELP
     The following is a little help file to remind me how to use cscope with
     vim as I am always forgetting how to do it.

     1) First ensure the cscope mapping files is loaded. menv should take care
        of this.
     2) Next create you cscope file. The alias cscopeinit will do this.
        Essentially the mapping file will either load the cscope.out in the
        local dir for the cscope file specified in CSCOPE_DB. This alias sets
        this up using absolute file names so it will work from anywhere.
     3) To open a tag (function etc) from the command line use 'vim -t main'
     4) When in vim put your cursor over the desired tag and enter a hotkey
        combo. Some useful ones include :
          CTRL-\ t: to find all uses of a function, type, etc.
          CTRL-\ g: to find the global definition of a function, type, etc.
          CTRL-O: send you back to the location before the last search
HELP
}

menv_function linecount
function linecount {
  function count_ext {
    ret=`find . -not -name "*designer.cs" -and -name "*.$1"\
      -exec wc -l {} \; \
      | awk '{lines += $1 ; files += 1  }; END { print lines } '`

    if [[ $ret == "" ]] ; then
      echo "0"
    else
      echo $ret
    fi
  }
  HLC=`count_ext h $1`
  CLC=`count_ext c $1`
  CPPLC=`count_ext cpp $1`
  CUCLC=`count_ext C $1`
  HPPLC=`count_ext hpp $1`
  CSLC=`count_ext cs $1`
  JAVALC=`count_ext java $1`
  SMLLC=`count_ext sml $1`
  unset count_ext

  echo -ne "Line Counts:\n
    C headers = $HLC, C source = $CLC\n
    C++ (CPP) source = $CPPLC, C++ (C) source = $CUCLC, C++ headers = $HPPLC\n
    C# = $CSLC, java = $JAVALC, sml = $SMLLC\n"
  TLC=`expr $HLC + $CLC + $CPPLC + $CUCLC + $HPPLC + $CSLC + $JAVALC + $SMLLC`
  echo "Total Line Count: $TLC"
}

