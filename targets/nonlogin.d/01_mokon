#!/bin/bash
# (C) 2013-2015 David 'Mokon' Bond, All Rights Reserved
  
# I like to keep my prompt simple...
TC_GRE="\[\033[0;32;40m\]"
TC_RESET="\[\033[0;0m\]"
ORIG_PS1=$PS1
PS1="${TC_GRE}i:${TC_RESET}"
unset TC_GRE
unset TC_RESET

# Proper umask
umask 022
  
LS_COLORS="rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=01;05;37;41:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.tbz=01;31:*.tbz2=01;31:*.bz=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=01;36:*.au=01;36:*.flac=01;36:*.mid=01;36:*.midi=01;36:*.mka=01;36:*.mp3=01;36:*.mpc=01;36:*.ogg=01;36:*.ra=01;36:*.wav=01;36:*.axa=01;36:*.oga=01;36:*.spx=01;36:*.xspf=01;36:*.c=01;31:*.h=05;36:"

menv_export PAGER="/usr/bin/less -R"
menv_export LD_LIBRARY_PATH=/usr/lib

# Setup editor, vim perfered.
export EDITOR=ed
bash_cmd_exists emacs && EDITOR=emacs;
bash_cmd_exists vi && EDITOR=vi;
bash_cmd_exists vim && EDITOR=vim;

# A variable for google logging.
menv_export GLOG_minloglevel=0

export vt_install_dir="$menv_pkgs_dir/vt"
export vt_logs_dir="$menv_logs_dir"
export vt_config_dir="$menv_local_dir"
menv_alias v="sudo -E $menv_pkgs_dir/vt/v"
menv_alias fin="mopen ~/menv/local/Database.ods"

xset r rate 300 20 2> /dev/null

menv_function login_to_vm
function login_to_vm {
  local vm=$1
  local un=${2:-`logname`}
  local pw=${3:-vyatta}
  local force=${4:-no}

  if [ "$force" == "yes" ] ; then
    sudo virsh destroy $vm
  fi

  sudo -E bash -c ". ${vt_install_dir}/virsh.sh ; virsh_vm_wait_until_pingable $vm"
  local vmip=$(sudo -E perl -w $vt_install_dir/virt-addr $vm "default")
  echo "IP is $vmip."
  sshpass -p$pw ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o ConnectionAttempts=100 $un@$vmip
}

menv_alias fix_broken_chrome="/bin/rm -rf ~/.config/google-chrome/Default/Web\ Data"
menv_alias kill_chrome="sudo pkill -9 chrome"

export GOPATH=$HOME/menv/go
export PATH="$PATH:$GOPATH/bin"

menv_function run
function run {
  local OPTS=`getopt -n run_test -a -o hsc:vf:r:gGr \
    --long sudo,cpu-limit:,valgrind,memcheck,help \
    --long callgrind,filter:,repeat:,gdb,vgdb,reset,stress \
    -- "$@"` 2> /dev/null || exit -1

  local precmd=""
  local postcmd=""
  local vgdb=""
  local repeat_count=""
  local SESSION=$USER
  export WI=0
  local SELECTED_WINDOW=1
  unset TMUX

  tmux new-session -d -s $SESSION -n 'host'
  tmux send-keys  -t $SESSION:$((++WI)) "cd ~" C-m

  eval set -- "$OPTS"
  while true ; do
    case "$1" in
    -h|--help|\?) echo "huh? oh yeah I'm not going to help you!" && exit 0 ;;
    --reset|-r)
      reset
      shift 1;;
    --sudo|-s)
      precmd="sudo ${precmd}"
      shift 1;;
    --gdb|-g)
      precmd="${precmd} gdb"
      shift 1;;
    --vgdb|-G)
      precmd="${precmd} --vgdb=yes --vgdb-error=0"
      vgdb=1
      shift 1;;
    --cpu-limit|-c)
      local cpu_perf=$2
      precmd="${precmd} cpulimit -l $cpu_perc -i"
      shift 2;;
    --valgrind|-v|--memcheck)
      precmd="${precmd} valgrind --tool=memcheck --leak-check=full  \
        --show-reachable=no --undef-value-errors=no --track-origins=no \
        --child-silent-after-fork=no --trace-children=no --num-callers=100 \
        --fair-sched=yes"
      shift 1;;
    --callgrind)
      precmd="${precmd} valgrind --tool=callgrind"
      shift 1;;
    --filter|-f)
      local filter=$2
      cmd="${cmd} --gtest_filter=${filter}"
      shift 2;;
    --repeat|-r)
      if ! type repeat-command &> /dev/null; then
        echo "repeat-command not valid"
        exit -1
      fi
      repeat_count=$2
      shift 2;;
    --stress)
      tmux new-window -t $SESSION:$((++WI)) -n "$title" "stress -c 10"
      sleep 5
      shift 1;;
    --cleanup)
      c
      shift 1;;
    --)
      shift 1
      break;;
    *)
      exit -1;;
    esac
  done

  local cmd=$@
  local exe=""
  if [ ! -z ${repeat_count} ] ; then
    if [ ! -z ${vgdb} ] ; then
      echo "You can't run vgdb and repeat together. Yet..."
      exit -1
    fi
    exe="repeat-command \"${precmd} ${cmd} ${postcmd}\" ${repeat_count}"
  else
    exe="${precmd} ${cmd} ${postcmd}"
  fi

  tmux new-window -t $SESSION:$((++WI)) -n "$title" "${exe}"

  if [ ! -z ${vgdb} ] ; then
    exe="eval (echo -e 'set breakpoint pending on\n$BREAKS \
                        target remote | /usr/bin/vgdb\n \
                        continue\n') | \
                        gdb --args ${cmd}"
    tmux split-window -t -h "${exe}"
  fi

  tmux select-window -t $SESSION:$SELECTED_WINDOW
  tmux attach-session -t $SESSION

  return $RETURN
}
