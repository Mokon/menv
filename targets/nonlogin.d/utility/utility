#!/bin/bash
# (C) 2013-2014 David 'Mokon' Bond, All Rights Reserved

menv_alias count_files_in_directory_r="find . -type f | wc -l"

# A function to list a directory structure in a nice tree.
menv_function tree_list
function tree_list {
  ls -R $1 | grep ":$" \
    | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'
}

# A function to grep excluding something I normally don't care about.
menv_function mgrep
function mgrep {
  grep -rn $1 $2 |grep -v .svn |grep -v Binary |grep -v .git
}

# Finds a program in the path which contains part of the given string.
menv_function findprogram
function findprogram {
  ls $(echo $PATH:/sbin:/usr/sbin | sed "s/:/\ /g") | grep "$1" \
    | sort --unique
}

menv_function find_large_files
function find_large_files {
  find / -type f -size +100000k -exec ls -lh {} \; | awk '{ print $9 ": " $5 }'
}

# Function that opens vim at a given line number.
menv_function vin
function vin {
  vim +$2 $1
}

# Function that appends to the end of a file.
menv_function append_to_file
function append_to_file {
  echo $1 >> $2
}

# A fucntion to swap two files.
menv_function swap
function swap() {
  local tmp`mktemp`
  mv "$1" $tmp
  mv "$2" "$1"
  mv $tmp "$2"
}

# Diffs two urls/files.
menv_function urldiff
function urldiff {
  if [[ $1 == http* ]] ; then
    local file1=`mktemp`
    fetch $1 $file1
  else
    local file1=$1
  fi

  if [[ $2 == http* ]] ; then
    local file2=`mktemp`
    fetch $2 $file2
  else
    local file2=$2
  fi

  diff $file1 $file2
  local ret=$?

  if [[ $1 == http* ]] ; then
    $RM $file1
  fi

  if [[ $2 == http* ]] ; then
    $RM $file2
  fi

  return $ret
}

menv_function cat_all_files_in_dir
function cat_all_files_in_dir {
  find $1 -type f -exec /bin/cat '{}' \;
}

# Simple hack function to diff the file contents recursively of two folders.
menv_function lsdiff
function lsdiff {
  ls -R $1 |grep -v "\/" &> /tmp/ls1.diff
  ls -R $2 |grep -v "\/" &> /tmp/ls2.diff
  local tmp1=`mktemp`
  local tmp2=`mktemp`
  diff $tmp1 $tmp2
  $RM $tmp1 $tmp2
}

# Opens a file based on its extension or hashbang.
menv_function mopen
function mopen {
  file="$1"

  case $file in
    *.pdf) evince "$file"&> /dev/null & ;;
    *.odt) oowriter "$file" &> /dev/null & ;;
    *.ods) ooffice "$file" &> /dev/null & ;;
    *.dot)
      pngfile=`mktemp --suffix==.png`
      dot_to_png $file $pngfile
      shotwell "$pngfile" &> /dev/null & ;;
    *.png|*.jpg|*.jpeg) shotwell "$file" &> /dev/null & ;;
    *.pcap|*.npcap) wireshark "$file" &> /dev/null & ;;
    *.log|*.txt|*.rej|*.patch) gedit "$file" &> /dev/null & ;;
    *) echo "I don't know how to open that." ;;
  esac
}

menv_function dot_to_png
function dot_to_png {
  in=$1
  out=$2
  dot $in -Tpng -o $2
}

menv_function convert_to_gif
function convert_to_gif {
  local files=$1
   g.png
  local output=$2
  local delay=${3:-100}
  local size=${4:-640x480}
  mogrify -resize $size $files
  convert -delay $delay -loop 0 $files $output
}

menv_function topen
function topen {
  file="$1"

  case $file in
    *.dot)
      pngfile=`mktemp`
      dot_to_png $file $pngfile
      python -m fabulous.image "$pngfile" ;;
    *.png|*.jpg|*.jpeg) python -m fabulous.image "$file"  ;;
    *.log|*.txt|*.rej|*.patch|*.cpp|*.c|*.h|*.hpp) vim "$file"  ;;
    *) echo "I don't know how to open that." ;;
  esac
}

menv_function list_root_owned_files
function list_root_owned_files {
  dir=${1:-~}

  find $dir -uid 0
}

