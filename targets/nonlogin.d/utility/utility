#!/bin/bash
# (C) 2013-2019 David 'Mokon' Bond, All Rights Reserved

function empty_ru {
  if [ -f ~/.local/share/recently-used.xbel ] ; then
    sudo chattr -i ~/.local/share/recently-used.xbel
  fi
  echo "" | sudo tee ~/.local/share/recently-used.xbel > /dev/null
  sudo chattr +i ~/.local/share/recently-used.xbel
}

function vim_recursive_open {
    dir=$1
    find $dir \( -name '.?*' -prune \) -o -type f -exec vim {} +
}

# A function to list a directory structure in a nice tree.
function tree_list {
  ls -R $1 | grep ":$" \
    | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'
}

function start_vm {
  local vm=$1
  if VBoxManage list runningvms |grep -q $vm ; then
    echo "vm already running"
  else
    VBoxManage startvm $vm --type headless
  fi
}

function stop_vm {
  local vm = $1
  VBoxManage controlvm $vm poweroff
}

# A function to grep excluding something I normally don't care about.
function mgrep {
  grep -rn $1 $2 |grep -v .svn |grep -v Binary |grep -v .git
}

# Finds a program in the path which contains part of the given string.
function findprogram {
  ls $(echo $PATH:/sbin:/usr/sbin | sed "s/:/\ /g") | grep "$1" \
    | sort --unique
}

function find_large_files {
  find / -type f -size +100000k -exec ls -lh {} \; | awk '{ print $9 ": " $5 }'
}

# Function that appends to the end of a file.
function append_to_file {
  echo $1 >> $2
}

# A fucntion to swap two files.
function swap {
  local tmp`mktemp`
  mv "$1" $tmp
  mv "$2" "$1"
  mv $tmp "$2"
}

# Diffs two urls/files.
function urldiff {
  if [[ $1 == http* ]] ; then
    local file1=`mktemp`
    fetch $1 $file1
  else
    local file1=$1
  fi

  if [[ $2 == http* ]] ; then
    local file2=`mktemp`
    fetch $2 $file2
  else
    local file2=$2
  fi

  diff $file1 $file2
  local ret=$?

  if [[ $1 == http* ]] ; then
    $BINRM $file1
  fi

  if [[ $2 == http* ]] ; then
    $BINRM $file2
  fi

  return $ret
}

function cat_all_files_in_dir {
  find $1 -type f -exec /bin/cat '{}' \;
}

# Simple hack function to diff the file contents recursively of two folders.
function lsdiff {
  ls -R $1 |grep -v "\/" &> /tmp/ls1.diff
  ls -R $2 |grep -v "\/" &> /tmp/ls2.diff
  local tmp1=`mktemp`
  local tmp2=`mktemp`
  diff $tmp1 $tmp2
  $BINRM $tmp1 $tmp2
}

function find_and_replace_all {
  local search_pattern=$1
  local replace_pattern=$2
  local dir=${3:-./}

  find $dir -type f -and -not -path "*.git*" \
    -exec sed -i -e "s/$search_pattern/$replace_pattern/g" {} \;
}

# Opens a file based on its extension or hashbang.
function mopen {
  local file="$1"

  if [ -d $file ] ; then
    nautilus "$file" &> /dev/null &
  elif [ -f $file ] ; then
    case $file in
      *.pdf) evince "$file"&> /dev/null & ;;
      *.odt) oowriter "$file" &> /dev/null & ;;
      *.ods) ooffice "$file" &> /dev/null & ;;
      *.html) google-chrome "$file" &> /dev/null & ;;
      *.dot)
        local pngfile=`mktemp --suffix==.png`
        dot_to_png $file $pngfile
        shotwell "$pngfile" &> /dev/null & ;;
      *.png|*.jpg|*.jpeg) shotwell "$file" &> /dev/null & ;;
      *.pcap|*.npcap) wireshark "$file" &> /dev/null & ;;
      *.log|*.txt|*.rej|*.patch|*.config) gedit "$file" &> /dev/null & ;;
      *)
          echo "I don't know how to open that, falling back to xdg-open!"
          xdg-open "$file"
          ;;
    esac
  else
    echo "I don't know how to open that, it is not a directory or regular file."
  fi
}

function dot_to_png {
  local in=$1
  local out=$2
  dot $in -Tpng -o $2
}

function convert_to_gif {
  local files=$1
  local output=$2
  local delay=${3:-100}
  local size=${4:-640x480}
  mogrify -resize $size $files
  convert -delay $delay -loop 0 $files $output
}

function topen {
  local file="$1"

  if [ -d $file ] ; then
    cd $file
  elif [ -f $file ] ; then
    case $file in
      *.dot)
        local pngfile=`mktemp`
        dot_to_png $file $pngfile
        python -m fabulous.image "$pngfile" ;;
      *.png|*.jpg|*.jpeg) python -m fabulous.image "$file"  ;;
      *.log|*.txt|*.rej|*.patch|*.cpp|*.c|*.h|*.hpp) vim "$file"  ;;
      *.html) lynx "$file" &> /dev/null & ;;
      *) echo "I don't know how to open that." ;;
    esac
  else
    echo "I don't know how to open that, it is not a directory or regular file."
  fi
}

function list_root_owned_files {
  local dir=${1:-~}

  find $dir -uid 0
}

# This function takes a patch file and splits it into new and exisiting
# components. A new component is a sub patch which creates a new file. An
# existing component is a sub patch which edits an existing file.
function split_patch_into_new_and_existing {
  local patch=$1

  local existing=`realpath ${patch/\.patch/}_existing.patch`
  local new=`realpath ${patch/\.patch/}_new.patch`

  touch $existing
  touch $new

  pushd .

  local splitdir=`mktemp -d`
  local patch_part=${1}.part

  splitdiff -a $patch

  for file in $patch_part* ; do
    tmpfile=`mktemp`
    if grep "\-\-\- /dev/null" $file &> /dev/null ; then
      dst=$new
    else
      dst=$existing
    fi
    cat $file $dst &> $tmpfile
    mv -f $tmpfile $dst
  done

  popd
}

function unix_epoch {
  date +%s
}

function set_brightness {
  local brightness=${1:-100}
  sudo bash -c "echo $brightness > /sys/class/backlight/intel_backlight/brightness"
}

function pretty_print_json {
  local json=$1
  local tmp_file=`mktmp`

  cat $json  | python -m json.tool &> $tmp_file
  mv -b $tmp_file $json
}

function remove_empty_dirs {
  local dir=${1:-.}

  find $dir -type d -empty -exec rmdir {} \;
}

function tail_log {
  local unit=$1
  journalctl -u $unit -f --since $(date +%H:%M:%S)
}

function sum_transfer_size {
  local file=$1

  awk '{print $3}' $file | sed 's/KB/000/' | sed 's/MB/000000/' | \
    grep -v - | grep -v % | awk '{ sum += $1 } END { print sum }'
}

alias dropboxd="~/.dropbox-dist/dropboxd"

function determine_filesystem {
  local dev=${1:-sd1}

  sudo fdisk /dev/$dev -l
}

function grep_exclude_list {
  local pattern=$1

  local cmd="/usr/bin/grep -rn $pattern ."
  for param in ${*:2} ; do
    cmd="$cmd | grep -v $param "
  done
  echo $cmd
  eval $cmd
}

function what {
  local OUT=`which $@ 2> /dev/null`
  if [ $? -eq 0 ]; then
    echo $OUT
  fi

  OUT=`type $@ 2> /dev/null`
  if [ $? -eq 0 ]; then
    echo $OUT
  fi

  OUT=`alias $@ 2> /dev/null`
  if [ $? -eq 0 ]; then
    echo $OUT
  fi
}

function list_path_permissions {
  local file=$1
  local dir=$file

  while true ; do
    ls -altZd $dir
    if [ "$dir" = "/" ] ; then
        break;
    fi
    dir=$(realpath `dirname $dir`)
  done
}

function find_ext {
  local ext=$1
  local dir=${2:-.}

  find $dir -iname "*.$ext"
}

function talk {
  local mode=$1
  local text=$2

  case $mode in
    festival) echo "$text" | festival --tts ;;
    spd) spd-say "$text" ;;
    espeak|*) espeak "$text" ;;
  esac
}

function find_all_videos {
  EXTS=(mov mp4 avi mpeg mkv flv wmv)
  for ext in "${EXTS[@]}" ; do
    find . -type f -iname "*.$ext"
  done
}

function scp_all_videos {
  local dst=$1

  EXTS=(mov mp4 avi mpeg mkv flv wmv)
  mkdir -p ~/movs
  for ext in "${EXTS[@]}" ; do
    find . -type f -iname "*.$ext" -exec cp {} ~/movs \;
  done
  scp -r ~/mov $2
}

function enumerate_output {
"$@" 2> >(sed 's/^/2: /') > >(sed 's/^/1: /')
}

function sshp {
  local i=60
  while [[ $i -ne 0 ]] ; do
    ssh $*
    if [[ $? -eq 0 ]] ; then
      break
    fi
    ((--i))
    sleep 1
  done
}

function cut_file_between {
  local file=$1
  local start=$2
  local end=$3
  sed -n "${start},${end}p" $file
}

function checksum_dir {
  tar -cf - $1 | md5sum
}

function frequency {
  local file=$1
  awk -F ' ' '{print $1}' $file | sort | uniq -c | sort -nr
}

function run_remote_script {
  local ip=$1
  local script=$2

  ssh -x -tt $ip << EOF
    $script
    exit 0
EOF
}

function merge_pdfs {
  local out=$1
  shift

  gs -q -sPAPERSIZE=letter -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sOutputFile=$out.pdf $@
}

function what_file_in_transfer {
  local dir=$1
  local last_file=$2
  ls -R $dir|grep "$last_file" -B 10000000 |wc -l
}

function open_all_files_in_dir {
  find . -xtype f -exec vim {} +
}

function ls_numeric {
  ls -l $1 | \
    awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/) \ *2^(8-i));if(k)printf("%0o ",k);print}'
}
