#!/bin/bash
# (C) 2013-2019 David 'Mokon' Bond, All Rights Reserved

# Networking aliases and functions
alias arp_flush="ip -s -s neigh flush all"
alias amialone="ping 8.8.8.8"
alias amialonedns="ping google.com"
alias tcp="sudo netstat -tanp"

alias snmpwalk1="snmpwalk -v1 -c public"
alias snmpwalk2="snmpwalk -v2c -c public"
alias snmpwalk3="snmpwalk -v3 -c public"
alias snmpwalk1_local="snmpwalk1 127.0.0.1"

export HOSTALIASES=$menv_cache_dir/hosts

function add_host {
  echo "$alias $url" >> $HOSTALIASES
}

function convert_hex_to_ip {
  printf '%d.%d.%d.%d\n' `echo $@ | sed -r 's/(..)/0x\1 /g'`
}

function kill_frr {
  sudo pkill -9 -f bgpd
  sudo pkill -9 -f zebra
  sudo pkill -9 -f vtysh
  sudo ip route flush proto zebra
  sudo /bin/rm -f /var/run/bgpd.pid
  sudo /bin/rm -f /var/run/bgpd.vty
  sudo /bin/rm -f /var/run/zebra.pid
  sudo /bin/rm -f /var/run/zebra.vty
  sudo /bin/rm -f /var/run/zserv.api
}

function launch_frr {
  kill_frr
  sudo zebra &
  sudo bgpd &
  sudo vtysh
}

function emulate_traffic {
  local dst_addr=${1:-224.0.0.9}
  local src_addr=${2:-172.16.1.5}
  local dst_port=${3:-520}
  local src_port=${4:-520}

  sudo nc $dst_addr $dst_port -vu -s $src_addr -p $src_port
}

function find_subnet_devices {
  local subnet=${1:-192.168.1.0/24}

  nmap -v -sn $subnet |grep -B 1 --no-group-separator "Host is up"
}

function tcp_client {
  local port=$1

  nc -w 30 --recv-only -x nc.log -4 localhost $port
}

# A function which looks up a ethertype
function ethertype {
  local etypein_dec=`printf %d $1`
  local etypein_hex=`printf %03x $1`

  local file=${menv_cache_dir}/ethertype
  if [ ! -f $file ]; then
    local url=https://www.iana.org/assignments/ieee-802-numbers/ieee-802-numbers-1.csv
    fetch $url $file
  fi

  local OLDIFS=$IFS
  IFS=,
  shopt -s nocasematch
  while read etype_dec etype_hex exp_enet_dec exp_enet_octal desc ref ; do
    if [[ $etype_dec == $etypein_dec || $etype_hex == $etypein_hex ]] ; then
      echo $desc $ref
    fi
  done < $file
  shopt -u nocasematch
  IFS=$OLDIFS
}

function port {
  local port=$1

  local file=${menv_cache_dir}/ports
  if [ ! -f $file ]; then
    local url=http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.csv
    fetch $url $file
  fi

  echo "According to IANA"
  grep ",$port," $file

  echo "According to services"
  grep " $port/" /etc/services
}

function dec_to_ip {
  local ip dec=$@
  for e in {3..0} ; do
    ((octet = dec / (256 ** e) ))
    ((dec -= octet * 256 ** e))
    ip+=$delim$octet
    delim=.
  done
  printf '%s\n' "$ip"
}

function ip_to_dec {
  local a b c d ip=$@
  IFS=. read -r a b c d <<< "$ip"
  printf '%d\n' "$((a * 256 ** 3 + b * 256 ** 2 + c * 256 + d))"
}

function ip_substraction {
  local ipa=$1
  local ipb=$2

  local ipa_d=$(ip_to_dec $ipa)
  local ipb_d=$(ip_to_dec $ipb)

  calc $ipa_d - $ipb_d
}

function hex_to_ip {
  printf '%d.%d.%d.%d\n' `echo $@ | sed -r 's/(..)/0x\1 /g'`
}

function ip_to_hex {
  printf '%.2X%.2X%.2X%.2X\n' `echo $@ | sed -e 's/\./ /g'`
}

alias mcast_route_cache="cat /proc/net/ip_mr_cache"

function mcast_ip6_join {
  local interface=$1
  local group=$2
  local src=$3

  vlc -vvv udp://[$src]@[$group] --miface=$interface
}

function mcast_ip6_join {
  local interface=$1
  local group=$2

  vlc -vvv udp://@[$group] --miface=$interface
}

function mcast_ip6_joins {
  local path=/proc/net/igmp6
  while read index intname address refcnt flags timer ; do
    echo "$intname is joined on group $address $refcnt times with flags $flags and timer $timer."
  done < $path
}

function prefer_wifi {
  local wifi=$1

  nmcli connect modify ${wifi} ipv4.route-metric 50
  nmcli connect modify ${wifi} ipv6.route-metric 50
}

# A function to download an rfc and store it on the localhost. If the -l
# option is given the rfc will be opened in lynx.
function rfc {
  local ietf=http://tools.ietf.org
  local rfcdir=$menv_cache_dir/rfc
  local rfc=$1

  if [[ $2 == "-l" ]] ; then
    local extension=html
    local url=$ietf/$extension/rfc$rfc
  else
    local extension=txt
    local url=$ietf/rfc/rfc$rfc.$extension
  fi

  if [ ! -d $rfcdir ]; then
    mkdir $rfcdir
  fi

  if [ ! -f $rfcdir/$rfc.$extension ]; then
    fetch $url $rfcdir/$rfc.$extension
    if [[ $? != 0 ]]; then
      $BINRM -f $rfcdir/$rfc.$extension
    fi
  fi

  if [ -f $rfcdir/$rfc.$extension ]; then
    if [[ $2 == "-l" ]] ; then
      lynx $rfcdir/$rfc.$extension
    else
      cat $rfcdir/$rfc.$extension | $PAGER
    fi
  else
    echo "RFC Not Found"
  fi
}

function update_host {
  local hostname=$1
  local ip=$2
  local file=${3:-/etc/hosts}

  # If the name exists in the host file delete it.
  sudo sed -i "/ $hostname/d" $file

  # Now append the new host entry to the file
  sudo bash -c " echo '$ip $hostname' >> /etc/hosts"
}

function convert_to_pcap {
  local file=$1
  local encap=${2:-tcp}
  local proto=${3-bgp}

  case $encap in
    tcp) encap="-T";;
      *) ;;
  esac

  case $proto in
    bgp) proto=179;;
      *) ;;
  esac

  text2pcap $encap $proto,$proto $file ${file}.pcap
  mopen ${file}.pcap
}

function capture_on_interfaces {
  interfaces=$1
  trace_length=${2:-420}

  for interface in ${interfaces} ; do
    tshark_pcap=capture_${interface}.pcap
    sudo tshark -q -i $interface -a duration:$trace_length -w /tmp/$tshark_pcap &
  done

  sleep $trace_length
}

function netbios_scan {
  local dns=${1}

  sudo nbtscan -r $dns/24
}

function netbios_ip {
  local dns=${1}

  nmblookup $dns | cut -f 1 -d \" \"
}

function netbios_ssh {
  local dns=${1}
  local username=${2:-$USER}

  ssh $username@`netbios_ip $dns`
}

function multicast_ipv6_traffic {
  local int1=$1
  local int2=$2
  local int3=$3

  mgen input << END
    INTERFACE $int1
    0.0 JOIN ff0e::3333:2222:1111 INTERFACE $int2
    1.0 ON 1 UDP DST ff0e::3333:2222:1111/5001 SRC 5001 PERIODIC [1 512] COUNT 10000 TTL 100
    # 100000.0 JOIN 224.225.1.2 INTERFACE $int3
END
}

function multicast_ipv4_traffic {
  local int1=$1
  local int2=$2
  local int3=$3

  mgen input << END
    INTERFACE $int1
    0.0 JOIN 224.225.1.2 INTERFACE $int2
    10.0 ON 1 UDP DST 224.225.1.2/5000 SRC 5001 PERIODIC [1 512] COUNT 1 TTL 10 DATA [10]
    11.0 ON 2 UDP DST 224.225.1.2/5001 SRC 5001 PERIODIC [1 512] COUNT 1 TTL 10 DATA [11]
    12.0 ON 3 UDP DST 224.225.1.2/5002 SRC 5001 PERIODIC [1 512] COUNT 1 TTL 10 DATA [12]
    13.0 ON 4 UDP DST 224.225.1.2/5003 SRC 5001 PERIODIC [1 512] COUNT 1 TTL 10 DATA [13]
    14.0 ON 5 UDP DST 224.225.1.2/5004 SRC 5001 PERIODIC [1 512] COUNT 1 TTL 10 DATA [14]
    15.0 ON 6 UDP DST 224.225.1.2/5005 SRC 5001 PERIODIC [1 512] COUNT 1 TTL 10 DATA [15]
    16.0 ON 7 UDP DST 224.225.1.2/5006 SRC 5001 PERIODIC [1 512] COUNT 1 TTL 10 DATA [16]
    17.0 ON 8 UDP DST 224.225.1.2/5007 SRC 5001 PERIODIC [1 512] COUNT 1 TTL 10 DATA [17]
    18.0 ON 9 UDP DST 224.225.1.2/5008 SRC 5001 PERIODIC [1 512] COUNT 1 TTL 10 DATA [18]
    # 100000.0 JOIN 224.225.1.2 INTERFACE $int3
END
}

alias show_multicast_joins="ip maddr show"

function join_multicast_group {
  local group=$1
  local ip=$2
  local port=1337
  local timeout=10

  socat -T ${timeout} STDIO UDP4-DATAGRAM:${group}:${port},ip-add-membership=${group}:${ip}
}

function change_igmp_version {
  local version=$1
  local interface=$2
  echo "${version}" |
    sudo tee /proc/sys/net/ipv4/conf/${interface}/force_igmp_version > /dev/null
}

function echo_many_routes {
  local max=${1:-100}

  for i in $(seq 1 $max) ; do
    echo "ip route 1.1.$i.0/24 blackhole"
  done
}

alias iptables_stop="sudo systemctl stop firewalld.service"
alias networking_restart="sudo systemctl restart NetworkManager"

function convert_yang_to_png_uml {
  local infile=$1

  pyang -f uml $infile -o ${infile}.uml
  plantuml ${infile}.uml -o .
  $BINRM ${infile}.uml
  mopen ${infile}.png
}

function decode_hex_frame {
  local hex="$1"

  local hexdump=""
  local offset=0
  for byte in `echo $hex| sed -e 's/\(..\)/\1\n/g'` ; do
    if (( $offset % 16 == 0 )) ; then
      if (($offset != 0 )) ; then
        hexdump+="\n"
      fi
      hexdump+=`printf "%06X " "$offset"`
    fi
    hexdump+="$byte "
    ((offset++))
  done
  hexdump+=`printf "\n%06X" "$offset"`

  printf "$hexdump\n" | text2pcap -q - - | tshark -V -r -
}

function taildump {
  local file=$1
  tail -c +1 -f $file | tcpdump -l -r -
}

function yang_tree {
	local model=$1
	find ~/docs/opensource/ -iname "*${model}*.yang" | xargs pyang -f tree
}
