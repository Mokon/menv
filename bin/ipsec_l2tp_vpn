#!/bin/bash
# (C) 2013-2015 David 'Mokon' Bond, All Rights Reserved
# This is a simple bash script which installs an ipsec/l2tp based vpn on a
# fedora (21) system. This vpn can then be started, run, or stoped from the
# command line It also allows one to uninstall said vpn configuration.
# portability has not been ensured.

# TODO this shouldn't be static and rather should come in from the user.
PPP_INT=ppp0
VPN_ROUTE="10.0.0.0/8"
VPN_DNS="10.0.1.10"
DEFAULT_DNS="8.8.8.8"

WAIT_TIME=2

xl2tpd_conf_file=/etc/xl2tpd/xl2tpd.conf
ipsec_config_file=/etc/ipsec.conf
l2tp_control=/var/run/xl2tpd/l2tp-control
resolv_conf_file=/etc/resolv.conf

function main {
    local cmd=$1

    case $cmd in
        interactive) interactive ;;
        install) install_vpn ${@:2:$#} ;;
        uninstall) uninstall_vpn ${@:2:$#} ;;
        start) start_vpn ${@:2:$#} ;;
        stop) stop_vpn ${@:2:$#} ;;
        run) run_vpn ${@:2:$#} ;;
        watch) watch_log ;;
        usage|help) usage ;;
        *) exit_script "invalid cmd" ;;
    esac
}

function usage {
    cat <<- EOF
    sudo ipsec_l2tp_vpn interactive
    sudo ipsec_l2tp_vpn install <name> <ip> <pre_shared_secret> <username> <password>
    sudo ipsec_l2tp_vpn uninstall <name>
    sudo ipsec_l2tp_vpn start <name>
    sudo ipsec_l2tp_vpn stop <name>
    sudo run <name>
    ipsec_l2tp_vpn watch
    ipsec_l2tp_vpn usage|help
		EOF
}

function interactive {
    local vpn_name
    local vpn_ip
    local vpn_pre_shared_secret
    local username
    local password

    ensure_root
    ensure_num_args $# 0

    echo "I need some information about the ipsec/l2tp vpn you wish to install"

    echo -n "VPN Name: "
    read vpn_name
    echo

    echo -n "VPN IP: "
    read vpn_ip
    echo

    echo -n "VPN Pre Shared Secret: "
    read -s vpn_pre_shared_secret
    echo

    echo -n "VPN Username: "
    read username
    echo

    echo -n "VPN Password: "
    read -s password
    echo

    echo "installing vpn"
    install_vpn $vpn_name $vpn_ip $vpn_pre_shared_secret $username $password

    echo "starting vpn, type 'sudo vpn stop' to stop the vpn"
    echo "\ttype 'sudo vpn start' after stopping the vpn to restart"
    start_vpn $vpn_name
}

function install_vpn {
    local vpn_name=$1
    local vpn_ip=$2
    local vpn_pre_shared_secret=$3
    local username=$4
    local password=$5

    log "Installing vpn..."

    ensure_root
    ensure_num_args $# 5

    ensure_pkg_installed libreswan
    ensure_pkg_installed xl2tpd

    configure_ipsec $vpn_name $vpn_ip $vpn_pre_shared_secret
    configure_l2tp $vpn_name $vpn_ip $username $password

    log "Done installing vpn"
}

function uninstall_vpn {
    local vpn_name=$1

    ensure_root
    ensure_num_args $# 1

    log "Uninstalling vpn..."

    deconfigure_l2tp $vpn_name
    deconfigure_ipsec $vpn_name

    # I don't uninstall libreswan and xl2tpd as that might be overkill
    # and in fact might be the wrong thing to do.

    log "Done uninstaling vpn"
}

function start_vpn {
    local vpn_name=$1

    ensure_root
    ensure_num_args $# 1

    log "Starting vpn..."

    ensure_daemon_running ipsec
    ensure_daemon_running xl2tpd

    local file=/sys/class/net/$PPP_INT/operstate
    while [ ! -f $file ] ; do
        echo "c $vpn_name" > $l2tp_control
        if hash inotifywait &>/dev/null; then
            inotifywait -qqt $WAIT_TIME -e create $file
        else
           sleep $WAIT_TIME
        fi
    done

    sleep $WAIT_TIME
    install_network

    log "Done starting vpn"
}

function install_network {
    ensure_root

    log "Installing vpn network..."

    ip route add $VPN_ROUTE dev $PPP_INT

    append_if_line_dne "nameserver $VPN_DNS" $resolv_conf_file
    append_if_line_dne "nameserver $DEFAULT_DNS" $resolv_conf_file

    log "Done installing vpn network"
}

function uninstall_network {
    ensure_root

    log "Uninstalling vpn network..."

    delete_line_in_file "nameserver $DEFAULT_DNS" $resolv_conf_file

    ip route del $VPN_ROUTE dev $PPP_INT

    log "Done uninstalling vpn network"
}

function stop_vpn {
    local vpn_name=$1

    ensure_root
    ensure_num_args $# 1

    log "Stopping vpn...."

    uninstall_network
    echo "d $vpn_name" > $l2tp_control

    log "Done stopping vpn"
}

function ctrl_c {
    stop_vpn $RUNNING_VPN_NAME
    exit_script "terminated vpn"
}

function run_vpn {
    local vpn_name=$1

    ensure_root
    ensure_num_args $# 1

    log "Running vpn..."

    export RUNNING_VPN_NAME=$vpn_name
    trap ctrl_c SIGINT
    trap ctrl_c SIGTSTP

    start_vpn $vpn_name
    wait_till_file_dne /sys/class/net/$PPP_INT/operstate

    log "Done running vpn"
}

function watch_log {
    ensure_num_args $# 0

    echo "Watching VPN"
    echo

    echo "-----------------------------------------------------------"
    echo "Current kernel routing table"
    echo "-----------------------------------------------------------"
    ip route

    echo "-----------------------------------------------------------"
    echo "Current ip address information for vpn ppp interface"
    echo "-----------------------------------------------------------"
    ip address show dev $PPP_INT

    echo "-----------------------------------------------------------"
    echo "Following vpn related journal logs"
    echo "-----------------------------------------------------------"
    journalctl -t xl2tpd -t pppd -t ipsec -t NetworkManager -f
}

function configure_ipsec {
    local vpn_name=$1
    local vpn_ip=$2
    local vpn_pre_shared_secret=$3

    ensure_root
    ensure_num_args $# 3

    log "Configuring ipsec..."

    replace_line_in_file "#include /etc/ipsec.d/\*.conf" \
                         "include /etc/ipsec.d/\*.conf" $ipsec_config_file

    local vpn_ipsec_conf_file=/etc/ipsec.d/${vpn_name}.conf
    ensure_file_dne $vpn_ipsec_conf_file

    cat <<- EOF > $vpn_ipsec_conf_file
		conn $vpn_name
     authby=secret
     pfs=no
     auto=add
     keyingtries=3
     dpddelay=30
     dpdtimeout=120
     dpdaction=clear
     rekey=yes
     ikelifetime=8h
     keylife=1h
     type=transport
     left=%defaultroute
     leftnexthop=%defaultroute
     leftprotoport=17/1701
     right=$vpn_ip
     rightprotoport=17/1701
		EOF

    local vpn_ipsec_secrets_file=/etc/ipsec.d/${vpn_name}.secrets
    ensure_file_dne $vpn_ipsec_secrets_file

    cat <<- EOF > $vpn_ipsec_secrets_file
    %any $vpn_ip : PSK "$vpn_pre_shared_secret"
		EOF

    ensure_kmod_loaded af_key

    ipsec auto --add $vpn_name

    log "Done configuring ipsec"
}

function deconfigure_ipsec {
    local vpn_name=$1

    ensure_root
    ensure_num_args $# 1

    log "Deconfiguring ipsec..."

    ipsec auto --delete $vpn_name

    local vpn_ipsec_secrets_file=/etc/ipsec.d/${vpn_name}.secrets
    ensure_file_dne $vpn_ipsec_secrets_file

    local vpn_ipsec_conf_file=/etc/ipsec.d/${vpn_name}.conf
    ensure_file_dne $vpn_ipsec_conf_file

    replace_line_in_file "include /etc/ipsec.d/\*.conf" \
                         "#include /etc/ipsec.d/\*.conf" $ipsec_config_file

    log "Done deconfiguring ipsec..."
}

function configure_l2tp {
    local vpn_name=$1
    local vpn_ip=$2
    local username=$3
    local password=$4

    ensure_root
    ensure_num_args $# 4

    log "Configuring l2tp..."

    ensure_l2tp_config_clean $vpn_name

    cat <<- EOF >> $xl2tpd_conf_file
    ; start $vpn_name
    [lac $vpn_name]
    lns = $vpn_ip
    ppp debug = yes
    pppoptfile = /etc/ppp/options.xl2tpd.$vpn_name
    length bit = yes
    ; end $vpn_name
		EOF

    replace_line_in_file "; debug tunnel = yes" \
                         "debug tunnel = yes" $xl2tpd_conf_file

    local l2tp_options_file=/etc/ppp/options.xl2tpd.$vpn_name
    ensure_file_dne $l2tp_options_file

    cat <<- EOF > $l2tp_options_file
    ipcp-accept-local
    ipcp-accept-remote
    refuse-eap
    require-mschap-v2
    noccp
    noauth
    idle 1800
    mtu 1410
    mru 1410
    defaultroute
    usepeerdns
    debug
    lock
    connect-delay 5000
    name $username
    password $password
		EOF

    log "Done configuring l2tp..."
}

function ensure_l2tp_config_clean {
    local vpn_name=$1

    ensure_root
    ensure_num_args $# 1

    sed -i "/; start $vpn_name/,/; end $vpn_name/d" $xl2tpd_conf_file
}

function deconfigure_l2tp {
    local vpn_name=$1

    ensure_root
    ensure_num_args $# 1

    log "Deconfiguring l2tp..."

    local l2tp_options_file=/etc/ppp/options.xl2tpd.$vpn_name
    ensure_file_dne $l2tp_options_file

    replace_line_in_file "debug tunnel = yes" \
                         "; debug tunnel = yes" $xl2tpd_conf_file

    ensure_l2tp_config_clean $vpn_name

    log "Done deconfiguring l2tp"
}

function exit_script {
    local msg=$1
    local return_code=$2

    echo $msg
    exit $2
}

function ensure_root {
    if [[ $EUID -ne 0 ]]; then
      exit_script "must be root"
    fi
}

function ensure_kmod_loaded {
    local mod=$1

    ensure_root

    if lsmod | grep $mod &> /dev/null ; then
        modprobe $mod
    fi
}

function ensure_pkg_installed {
    local pkg=$1

    ensure_root

    if ! yum list installed $pkg &> /dev/null; then
        yum install -q -y $pkg
    fi
}

function ensure_file_dne {
    local file=$1

    if [ -f $file ] ; then
        /bin/rm -f $file
    fi
}

function replace_line_in_file {
    local pattern=$1
    local replacement=$2
    local file=$3

    sed -i "s@^$pattern\$@$replacement@" $file
}

function delete_line_in_file {
    local pattern=$1
    local file=$2

    sed -i "/$pattern/d" $file
}

function append_if_line_dne {
    local line=$1
    local file=$2

    if ! grep "$line" $file &> /dev/null ; then
        echo "$line" >> $file
    fi
}

function wait_till_file_dne {
    local file=$1

    while [ -f $file ] ; do
        if hash inotifywait &>/dev/null; then
            inotifywait -qqt $WAIT_TIME -e delete $file
        else
            sleep $WAIT_TIME
        fi
    done
}

function wait_till_file_exists {
    while [ ! -f $file ] ; do
        if hash inotifywait &>/dev/null; then
            inotifywait -qqt $WAIT_TIME -e create $file
        else
           sleep $WAIT_TIME
        fi
    done
}

function ensure_daemon_running {
    local daemon=$1

    ensure_root
    ensure_num_args $# 1

    systemctl restart $daemon
}

function ensure_num_args {
    if [ "$1" -ne $2 ] ; then
        exit_script "insufficent arguments"
    fi
}

function log {
    local msg=$1

    echo $msg
}

main $@
