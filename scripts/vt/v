#!/bin/bash
#
# virtual topology script for automatic vm and vnet configuration of virtual
# topologies.
#
# #############################################################################

function usage {
  cat <<END
  v | t|topology [TT] (<config_file>)
    | t|topology map (<config_file>) (<output_map_png>)
    | td|topology-device <vm name> console (<config-file>)
    | d|device <vm name> console|start|stop|unplug|suspend|reboot|resume|nets
    | l|list
    | setconf <config_file>

  TT=construct|enable|disable|destruct|restart|physical_construct
      |install_images|mgt|cfg_reload|remote_pkgs_reload|local_pkgs_reload
      |cmds_reload|list
END
}

if [ $UID != 0 ] ; then
  echo "vt should probably be run as root not '`whoami`'."
  usage
  exit -1
fi

. $menv_scripts_dir/vt/virtual_topology.sh
. $menv_scripts_dir/vt/virtual_topology_macros.sh

# #############################################################################
case $1 in
  #############################################################################
  # virtual topology commands
  t|topology)
    echo "Starting loading of virtual topology configuration"
    . ${3:-$menv_local_dir/vt_config}
    echo "Done loading of virtual topology configuration"
    case $2 in
      c|construct)                  virtual_topology_construct ;;
      e|enable)                     virtual_topology_enable ;;
      di|disable)                   virtual_topology_disable ;;
      d|destruct)                   virtual_topology_destruct ;;
      re|restart)                   virtual_topology_disable ;
                                    virtual_topology_enable ;;
      0|prec)                       virtual_topology_pre_construct ;;
      1|p|physical_construct)       virtual_topology_phy_construct;;
      2|i|install_images)           vt_install_image_all_vms ;;
      3|m|mgt)                      vt_mgt_all_vms ;;
      4|cr|cfg_reload)              vt_load_config_all_vms  ;;
      5|rr|remote_pkgs_reload)      vt_load_remote_packages_all_vms ;;
      6|lr|local_pkgs_reload)       vt_load_local_packages_all_vms ;;
      7|cmd|cmds_reload)            vt_run_commands_all_vms ;;
      8|pc)                         virtual_topology_post_construct ;;

      l|list)                       virtual_topology_list ;;
      ma|map) . $menv_scripts_dir/vt/virtual_topology_map.sh $4;
              virtual_topology_generate_map ;;
      *) echo "Unknown Invocation" ; usage ; exit -1 ;;
    esac
    ;;
  
  #############################################################################
  # virtual topology device commands
  td|topology-device)
    echo "Starting loading of virtual topology configuration"
    . ${4:-$menv_local_dir/vt_config}
    vm=$2
    vm=${branch}${cfgi}_vm$vm
    echo "Done loading of virtual topology configuration"
    case $3 in
      c|console) vt_vm_type_execute $vm console ;;
      *) echo "Unknown Invocation" ; usage ; exit -1 ;;
    esac
    ;;

  #############################################################################
  # virsh single command wrappers
  d|device)
    vm=$2
    case $3 in
      c|console) virsh console $vm ;;
      s|start) virsh start $vm ;;
      sto|stop) virsh shutdown $vm ;;
      u|unplug) virsh destroy $vm ;;
      su|suspend) virsh suspend $vm ;;
      r|reboot) virsh reboot $vm ;;
      re|resume) virsh resume $vm ;;
      n|nets) virsh domiflist $vm ;;
      *) echo "Unknown Invocation" ; usage ; exit -1 ;;
    esac
    ;;

  #############################################################################
  # misc.
  l|list) virsh_list ;;
  s|setconf)
    conf=$2
    defconf=$menv_local_dir/vt_config
    if [ -f $defconf ] && [ ! -L $defconf ] ; then
      echo "$defconf exists and it is not a symlink. Please move it."
    else
      rm $defconf
      ln -s $conf $defconf
    fi
    ;;
  h|help|-h|--help|usage|-help) usage ;;
  *) echo "Unknown Invocation" ; usage ; exit -1 ;;
esac

