#!/bin/bash
# (C) 2013 David 'Mokon' Bond, All Rights Reserved

if [[ "$SHELL" != *bash* ]] ; then
  echo "menv requires a bash shell, bye"
  exit -1
fi

# A global array of functions used to unset funcs on cleanup and a function
# which pushes to said array.
menv_funcs=()
function menv_function {
  menv_funcs+=("$1")
}
menv_function menv_function

# A global array of aliases used to unalias aliases on cleanup and a function
# which pushes to said array.
menv_aliases=()
menv_function menv_alias
function menv_alias {
  alias "$*"
  menv_aliases+=("$1")
}

# A global array of exports used to unset exports on cleanup and a function
# which pushes to said array.
menv_exports=()
menv_function menv_export
function menv_export {
  export "$*"
  menv_exports+=("$1")
}

# Directories on the local machine
menv_export menv_dir=~/menv
menv_export menv_backup_dir=$menv_dir/backup
menv_export menv_trash_dir=$menv_dir/trash
menv_export menv_cache_dir=$menv_dir/cache
menv_export menv_bin_dir=$menv_dir/bin
menv_export menv_core_dir=$menv_dir/core
menv_export menv_local_dir=$menv_dir/local
menv_export menv_dotfiles_dir=$menv_dir/dotfiles
menv_export menv_targets_dir=${menv_dir}/targets

# A tag to use to specify menv created the item in question
menv_export menv_gen_tag="menv_generated"

# Absolute paths for lsb commands.
menv_export MV=/bin/mv
menv_export LN=/bin/ln
menv_export RM=/bin/rm
menv_export CP=/bin/cp
menv_export TAR=/bin/tar
menv_export MKDIR=/bin/mkdir

# Some files on the local machine
menv_export menv_local_login=$menv_local_dir/login
menv_export menv_local_nonlogin=$menv_local_dir/nonlogin
menv_export menv_local_logout=$menv_local_dir/logout
menv_export menv_target_handler=$menv_core_dir/target_handler

# Some dotfile names
menv_export bashrc=.bashrc
menv_export bash_profile=.bash_profile
menv_export bash_logout=.bash_logout

# executes a target
menv_function menv_target
function menv_target {
  local file=$1

  source $menv_targets_dir/$file
}

# Executes all the target.d children.
menv_function menv_target_children
function menv_target_children {
  local file=$1
  local files=$(find $menv_targets_dir/${file}.d \
    -type f -and -not -name .gitkeep | sort )

  if [ ! -z "$files" ] ; then
    for f in $files ; do
      source $f
    done # TODO Have a module exclude pattern matcher
  fi
}

# Aux function to wget a file. If the second param is set then this is the name
# of the produced file.
menv_function fetch
function fetch {
  local url=$1

  command -v wget >/dev/null 2>&1 || { echo >&2 "wget not found" ; return ; }
  if [ -n "$2" ] ; then
    local fname=$2
  else
    local fname=`basename ${url}`
  fi
  wget -O $fname -q -N --no-check-certificate ${url}
}

# An aux function to grab a git repo
menv_function github_fetch
function github_fetch {
  local repo=$1

  fetch https://github.com/$repo/archive/master.tar.gz

  tar -xzf master.tar.gz
  $RM -f master.tar.gz
  $MV "$(basename $repo)-master" $(basename $repo)
}

# Aux function to setup a symbolic link. Backing up w/e was there before.
menv_function safe_symlink
function safe_symlink {
  local file=$1
  local to=$2

  if [ -f $file ] && { [ ! -L $file ] || [`readlink $file` != "$to"] ; } ; then
    echo "Found foreign ${file}. Backing up as ${menv_backup_dir}/${file}."
    $MKDIR -p `dirname ${menv_backup_dir}/${file}`
    $MV --backup=numbered $file ${menv_backup_dir}/${file}
  elif [ -L $file ] ; then
    echo "Found valid $file symlink to ${to}."
  fi

  if [ ! -f $file ] ; then
    $LN -s $to $file
  fi
}

# A function to delete something if it is a symlink.
menv_function if_symlink_rm
function if_symlink_rm {
  local file=$1

  if [ -L $file ] ; then
    $RM -f $file
  fi
}

# A nasty little function which grabs the latest sha hash from github
menv_function menv_latest_version
function menv_latest_version {
  j=`curl -s https://api.github.com/repos/mokon/menv/git/refs/heads/master | \
    sed 's/\\\\\//\//g' | sed 's/[{}]//g' | \
    awk -v k="text" '{n=split($0,a,","); for (i=1; i<=n; i++) print a[i]}' | \
    sed 's/\"\:\"/\|/g' | sed 's/[\,]/ /g' | sed 's/\"//g' | grep -w sha`
  echo ${j##*|} | awk {'print $2'}
}

# Shows the menv version or sets if set is the op.
menv_function menv_version
function menv_version {
  op=$1

  case $op in
    set) menv_latest_version &> ${menv_dir}/version ;;
    get|*) cat ${menv_dir}/version ;;
  esac
}

# A function to determine the distribution and pkg management tool
menv_function determine_dist
function determine_dist {
  DIST=$(lsb_release -a |grep "Distributor ID" |awk {'print tolower($3)'})

  if [ -z $DIST ] && [ -f /etc/redhat-release ] ; then
    if grep -q Fedora /etc/redhat-release; then
      DIST=fedora
    fi
  fi

  if [ -z $DIST ] && [ -f /etc/debian_version ] ; then
    DIST=debian
  fi

  if [ -z $DIST ] && [ -f /etc/os-release ] ; then
    DIST=""
  fi

  case $DIST in
    *fedora*|*redhat*) PKG_MGMT=rpm ;;
    *debian*|*ubuntu*) PKG_MGMT=dpkg ;;
    *) echo "Unknown Distribution" ;;
  esac

  menv_export DIST
  menv_export PKG_MGMT
}

determine_dist

