#!/bin/bash
# (C) 2013-2019 David 'Mokon' Bond, All Rights Reserved

if [[ "$SHELL" != *bash* && ! -z $PS1 ]] ; then
  SHELLS=($(chsh -l |grep bash)) ;
  if [ -z "${SHELLS[0]}" ] ; then
    if groups ${USER}|grep -q wheelx ; then
      if type dnf > /dev/null ; then
        sudo dnf -y install bash
      elif type yum > /dev/null ; then
        sudo yum -y install bash
      elif type apt-get > /dev/null ; then
        sudo apt-get -y install bash
      fi
    else
      echo "your shell is not bash and you are not in the wheel group"
      echo "please ask the system administrator to install bash"
    fi
  fi

  chsh -s ${SHELLS[0]}
  echo "your shell has been changed to bash, please re-run menv"
  exit -1
fi

. ~/menv/core/directories
export menv_user=$USER

# A tag to use to specify menv created the item in question
export menv_gen_tag="menv_generated"

export menv_vault_login=$menv_vault_dir/login
export menv_vault_nonlogin=$menv_vault_dir/nonlogin
export menv_vault_logout=$menv_vault_dir/logout
export menv_target_handler=$menv_core_dir/target_handler

export bashrc=.bashrc
export bash_profile=.bash_profile
export bash_logout=.bash_logout

alias menv_install="source ${menv_core_dir}/install"
alias menv_uninstall="source ${menv_core_dir}/uninstall"
alias menv_update="source ${menv_core_dir}/update"

if [ -f $menv_vault_dir/menv_config ]; then
  source $menv_vault_dir/menv_config
elif [ -f $menv_core_dir/menv_config ]; then
  source $menv_core_dir/menv_config
fi

# Silent pushd and popd
function spushd {
  pushd $@ &> /dev/null
}

function spopd {
  popd $@ &> /dev/null
}

# executes a target
function menv_target {
  local file=$1

  source $menv_targets_dir/$file
}

# Executes all the target.d children.
function menv_target_children {
  local file=$1
  local files=$(find $menv_targets_dir/${file}.d \
    -type f -and -not -name .gitkeep | sort )

  echo "=====" >> $menv_source_log
  if [ ! -z "$files" ] ; then
    for f in $files ; do
      if [[ ! -z $MENV_MODULE_EXCLUDES && $f =~ $MENV_MODULE_EXCLUDES ]] ; then
        echo "Excluding $file module $f."
      else
        spushd .
        if should_source_file $f; then
            source $f
        fi
        spopd
      fi
    done
  fi
}

function should_source_file {
  local file=$1
  file_header=$(sed -n '3p'<$file)

  header_regex="# requirements (.*)"
  if [[ "$file_header" =~ $header_regex ]]; then
    IFS=',' read -ra requirements <<< "${BASH_REMATCH[1]}"
    for requirement in "${requirements[@]}"; do
      if [[ "$requirement" =~ ^(.*)(==|!=|<=|>=)(.*)$ ]]; then
        LValue=${BASH_REMATCH[1]//[[:blank:]]/}
        Op=${BASH_REMATCH[2]//[[:blank:]]/}
        RValue=${BASH_REMATCH[3]//[[:blank:]]/}

        case "$LValue" in
          dist)
            case "$Op" in
              !=)
                if [ "$DIST" == "$RValue" ] ; then
                  echo "dist is $RValue, so not sourceing $file" >> $menv_source_log
                  return 1
                fi
                ;;
              ==)
                if [ "$DIST" != "$RValue" ] ; then
                  echo "dist is not $RValue, so not sourceing $file" >> $menv_source_log
                  return 1
                fi
                ;;
            esac
            ;;
          pkg_mgmt)
            case "$Op" in
              !=)
                if [ "$PKG_MGMT" == "$RValue" ] ; then
                  echo "pkg_mgmt is $RValue, so not sourceing $file" >> $menv_source_log
                  return 1
                fi
                ;;
              ==)
                if [ "$PKG_MGMT" != "$RValue" ] ; then
                  echo "pkg_mgmt is not $RValue, so not sourceing $file" >> $menv_source_log
                  return 1
                fi
                ;;
            esac
            ;;
          pkg_type)
            case "$Op" in
              !=)
                if [ "$PKG_TYPE" == "$RValue" ] ; then
                  echo "pkg_type is $RValue, so not sourceing $file" >> $menv_source_log
                  return 1
                fi
                ;;
              ==)
                if [ "$PKG_TYPE" != "$RValue" ] ; then
                  echo "pkg_type is not $RValue, so not sourceing $file" >> $menv_source_log
                  return 1
                fi
                ;;
            esac
            ;;
          gaming)
            echo "gaming is disabled so not sourceing $file" >> $menv_source_log
            return 1
            ;;
          gnome)
            if ! test -x "$(command -v "gnome-terminal")" ; then
              echo "gnome not found so not sourceing $file" >> $menv_source_log
              return 1
            fi

            if [ "$Op" != ">=" ] ; then
              echo "Corrupt requirement line Op '$Op' on file $file"
              return 1
            fi
            gnomeVersion="$(expr "$(gnome-terminal --version)" : '.* \(.*[.].*[.].*\)$')"
            if ! version_ge $gnomeVersion "$RValue" ; then
              echo "gnome version too old '$gnomeVersion' so not sourceing $file" >> $menv_source_log
              return 1
            fi
            ;;
          desktop)
            if [ "$Op" != "!=" ] ; then
              echo "Corrupt requirement line Op '$Op' on file $file"
              return 1
            fi

            if [ $MENV_DESKTOP -ne $RValue ] ; then
              echo "not a desktop system so not sourceing $file" >> $menv_source_log
              return 1
            fi
            ;;
          pkgs)
            if [ "$Op" != "!=" ] ; then
              echo "Corrupt requirement line Op '$Op' on file $file"
              return 1
            fi

            if [ $MENV_PKGS -ne $RValue ] ; then
              echo "not set to install pkgs so not sourceing $file" >> $menv_source_log
              return 1
            fi
            ;;
          *)
            echo "Corrupt requirement line LValue '$LValue' on file $file"
            ;;
        esac
      else
        echo "Corrupt requirement line '$requirement'"
        return 1
      fi
    done
  fi
  return 0
}

# Aux function to wget a file. If the second param is set then this is the name
# of the produced file.
function fetch {
  local url=$1

  command -v wget >/dev/null 2>&1 || { echo >&2 "wget not found" ; return ; }
  if [ -n "$2" ] ; then
    local fname=$2
  else
    local fname=`basename ${url}`
  fi
  echo "Fetching $url";
  wget -O $fname -q -N --timeout=10 --tries=3 --no-check-certificate ${url}
}

function fetch_w_timeout {
  local url=$1
  local timeout=${3:-60}

  command -v wget >/dev/null 2>&1 || { echo >&2 "wget not found" ; return ; }
  if [ -n "$2" ] ; then
    local fname=$2
  else
    local fname=`basename ${url}`
  fi
  echo "Fetching $url";
  timeout -k 5 $timeout wget -O $fname -q -N --no-check-certificate ${url}
}

# An aux function to grab a git repo
function github_fetch {
  local repo=$1

  fetch https://github.com/$repo/archive/master.tar.gz

  tar -xzf master.tar.gz
  $BINRM -f master.tar.gz
  $BINMV "$(basename $repo)-master" $(basename $repo)
}

# Aux function to setup a symbolic link. Backing up w/e was there before.
function safe_symlink {
  local file=$1
  local to=$2

  if [ -f $file ] && { [ ! -L $file ] || [ `readlink $file` != "$to" ] ; } ; then
    if ! diff -q $file /etc/skel/$file &> /dev/null ; then
      echo "Found foreign ${file}. Backing up as ${menv_backup_dir}/${file}."
      $BINMKDIR -p `dirname ${menv_backup_dir}/${file}`
      $BINMV_BCK $file ${menv_backup_dir}/${file}
    else
      # Found valid $file which is in the skel folder. Removing
      $BINRM $file
    fi
  elif [ -L $file ] ; then
    echo "Found valid $file symlink to ${to}."
  fi

  if [ ! -f $file ] ; then
    $BINLN -s $to $file
  fi
}

# A function to delete something if it is a symlink.
function if_symlink_rm {
  local file=$1

  if [ -L $file ] ; then
    $BINRM -f $file
  fi
}

# A nasty little function which grabs the latest sha hash from github
function menv_latest_version {
  local j=`curl -m 1 -L --connect-timeout 1 -s https://api.github.com/repos/mokon/menv/git/refs/heads/master | \
    sed 's/\\\\\//\//g' | sed 's/[{}]//g' | \
    awk -v k="text" '{n=split($0,a,","); for (i=1; i<=n; i++) print a[i]}' | \
    sed 's/\"\:\"/\|/g' | sed 's/[\,]/ /g' | sed 's/\"//g' | grep -w sha`
  local version=`echo ${j##*|} | awk {'print $2'}`
  if [ -z "$version" ] ; then
    version="unknown"
  fi
  echo $version
}

# Shows the menv version or sets if set is the op.
function menv_version {
  op=$1

  case $op in
    ignore) echo ignore &> ${menv_cache_dir}/version ;;
    set) menv_latest_version &> ${menv_cache_dir}/version ;;
    get|*) cat ${menv_cache_dir}/version ;;
  esac
}

function version_compare {
  if [[ $1 == $2 ]] ; then
    return 0
  fi
  local IFS=.
  local i ver1=($1) ver2=($2)
  for ((i=${#ver1[@]}; i<${#ver2[@]}; i++)) ;  do
    ver1[i]=0
  done
  for ((i=0; i<${#ver1[@]}; i++)) ;  do
    if [[ -z ${ver2[i]} ]] ; then
      ver2[i]=0
    fi
    if ((10#${ver1[i]} > 10#${ver2[i]})) ; then
      return 1
    fi
    if ((10#${ver1[i]} < 10#${ver2[i]})) ; then
      return 2
    fi
  done
  return 0
}

function version_le {
  version_compare $1 $2
  case $? in
    1)
      return 1 ;;
    0|2)
      return 0 ;;
  esac
}

function version_ge {
  version_compare $1 $2
  case $? in
    2)
      return 1 ;;
    0|1)
      return 0 ;;
  esac
}

function append_crontab {
  local cmd=$1
  (crontab -l ; echo "$cmd") 2>&1 | grep -v "no crontab" | sort | uniq | crontab -
}

function delete_crontab {
  local cmd=$1
  crontab -l |sed "/$cmd/d" |grep -v 'no crontab' | sort | uniq | crontab -
}

function menv_lock {
  local lockfile=$1

  trap "/bin/rm -f $lockfile; exit" INT TERM EXIT

  if type lockfile &> /dev/null ; then
    lockfile -r-1 $lockfile
  else
    while true ; do
      if mkdir $lockfile; then
        break
      fi
    done
  fi
}

function menv_unlock {
  local lockfile=$1

  $BINRM -rf $lockfile
  trap - INT TERM EXIT
}

function delete_line_in_file {
    local pattern=$1
    local file=$2

    sed -i "/$pattern/d" $file
}

function testconnection {
  local server=$1
  local suc_msg=$2
  local err_msg=$3
  local dns_err_msg=$4

  host -W1 "$server" &> /dev/null
  if [ $? -ne 0 ]; then
    echo $dns_err_msg
    return 1
  else
    ping -c1 -W1 "$server" &> /dev/null
    if [ $? -ne 0 ]; then
      echo $err_msg
      return 1
    else
      echo $suc_msg
      return 0
    fi
  fi
}

function menv_load_install_opts {
  if [ ! -f $menv_install_opts_file ]; then
    export MENV_DESKTOP=0
    export MENV_ROOt=0
    export MENV_PKGS=0
  else
    if grep -v --quiet noroot $menv_install_opts_file ; then
      export MENV_ROOT=1
    else
      export MENV_ROOT=0
    fi
    
    if grep -v --quiet nodesktop $menv_install_opts_file ; then
      export MENV_DESKTOP=1
    else
      export MENV_DESKTOP=0
    fi
    
    if grep -v --quiet nopkgs $menv_install_opts_file ; then
      export MENV_PKGS=1
    else
      export MENV_PKGS=0
    fi
  fi
}

source $menv_core_dir/dist

# Absolute paths for lsb commands.
export BINMV=/bin/mv
export BINCP=/bin/cp
if [ $DIST != "darwin" ] ; then
  export BINMV_BCK="/bin/mv --backup=numbered"
  export BINCP_BCK="/bin/cp --backup=numbered"
else
  export BINMV_BCK=/bin/mv
  export BINCP_BCK=/bin/cp
fi
export BINLN=/bin/ln
export BINRM=/bin/rm
export BINTAR=/bin/tar
export BINMKDIR=/bin/mkdir
